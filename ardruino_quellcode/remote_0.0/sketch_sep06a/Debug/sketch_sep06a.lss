
sketch_sep06a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f14  00000fa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800116  00800116  00000fbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001030  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d5a  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001483  00000000  00000000  000090a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b72  00000000  00000000  0000a525  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  0000c098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bb4  00000000  00000000  0000c92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034e6  00000000  00000000  0000e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  000119c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__vector_18>
  4c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	19 05       	cpc	r17, r9

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e4 e1       	ldi	r30, 0x14	; 20
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a6 e1       	ldi	r26, 0x16	; 22
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	ad 3b       	cpi	r26, 0xBD	; 189
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 82 07 	call	0xf04	; 0xf04 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 47 05 	call	0xa8e	; 0xa8e <main>
 110:	0c 94 88 07 	jmp	0xf10	; 0xf10 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
 118:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
 11a:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
 11c:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
 11e:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
 120:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
 122:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
 124:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
 126:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
 128:	05 c0       	rjmp	.+10     	; 0x134 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
 12a:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
 12c:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
 12e:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
 130:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
 132:	61 f1       	breq	.+88     	; 0x18c <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
 134:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
 136:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
 138:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
 13a:	b9 f3       	breq	.-18     	; 0x12a <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
 13c:	05 c0       	rjmp	.+10     	; 0x148 <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
 13e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
 140:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
 142:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
 144:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
 146:	11 f1       	breq	.+68     	; 0x18c <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
 148:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
 14a:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
 14c:	94 13       	cpse	r25, r20
    rjmp .L7   ;
 14e:	f7 cf       	rjmp	.-18     	; 0x13e <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
 150:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
 152:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
 154:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
 156:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
 158:	0a c0       	rjmp	.+20     	; 0x16e <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
 15a:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
 15c:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
 15e:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
 160:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
 162:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
 164:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
 166:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
 168:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
 16a:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
 16c:	79 f0       	breq	.+30     	; 0x18c <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
 16e:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
 170:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
 172:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
 174:	91 f3       	breq	.-28     	; 0x15a <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
 176:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
 178:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
 17a:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
 17c:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
 17e:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
 180:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
 182:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
 184:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
 186:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
 188:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
 18a:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
 18c:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
 18e:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
 190:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
 192:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
 194:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
 196:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
 198:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
 19a:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
 19c:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
 19e:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
 1a0:	08 95       	ret

000001a2 <setup>:
int delay_time = 200 ;  
bool debug = false;              // variable for reading the pin status
// the setup function runs once when you press reset or power the board
void setup() {
	// initialize digital pin 13 as an output.
	pinMode(LED01, OUTPUT);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LED01>
 1a8:	0e 94 a2 06 	call	0xd44	; 0xd44 <pinMode>
	pinMode(LED02, OUTPUT);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LED02>
 1b2:	0e 94 a2 06 	call	0xd44	; 0xd44 <pinMode>
	
	 pinMode(trigPin1, OUTPUT);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 a2 06 	call	0xd44	; 0xd44 <pinMode>
	 pinMode(echoPin1, INPUT);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 a2 06 	call	0xd44	; 0xd44 <pinMode>
	 
	 pinMode(trigPin2, OUTPUT);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 a2 06 	call	0xd44	; 0xd44 <pinMode>
	 pinMode(echoPin2, INPUT);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	0e 94 a2 06 	call	0xd44	; 0xd44 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 1d6:	26 e0       	ldi	r18, 0x06	; 6
 1d8:	40 e8       	ldi	r20, 0x80	; 128
 1da:	55 e2       	ldi	r21, 0x25	; 37
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	87 e1       	ldi	r24, 0x17	; 23
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <_ZN14HardwareSerial5beginEmh>

000001e8 <_Z8isActivei>:
//Serial.print("AT+BT-Remote");
}

// the loop function runs over and over again forever

bool isActive(int sensor){
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
		int trigPin,echoPin ;
		if (sensor == 1){
			trigPin= trigPin1;
			echoPin = echoPin1 ;
		}
		if (sensor == 2){
 1ec:	02 97       	sbiw	r24, 0x02	; 2
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <_Z8isActivei+0xe>
			trigPin= trigPin2;
			echoPin = echoPin2 ;
 1f0:	d7 e0       	ldi	r29, 0x07	; 7
		if (sensor == 1){
			trigPin= trigPin1;
			echoPin = echoPin1 ;
		}
		if (sensor == 2){
			trigPin= trigPin2;
 1f2:	c8 e0       	ldi	r28, 0x08	; 8
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <_Z8isActivei+0x12>
 1f6:	d2 e0       	ldi	r29, 0x02	; 2
 1f8:	c3 e0       	ldi	r28, 0x03	; 3
			echoPin = echoPin2 ;
		}

		long duration, distance ;
		digitalWrite(trigPin, LOW);  // Added this line
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	8c 2f       	mov	r24, r28
 1fe:	0e 94 de 06 	call	0xdbc	; 0xdbc <digitalWrite>
		delayMicroseconds(1); // Added this line
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 33 06 	call	0xc66	; 0xc66 <delayMicroseconds>
		digitalWrite(trigPin, HIGH);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 de 06 	call	0xdbc	; 0xdbc <digitalWrite>
		//  delayMicroseconds(1000); - Removed this line
		delayMicroseconds(10); // Added this line
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 33 06 	call	0xc66	; 0xc66 <delayMicroseconds>
		digitalWrite(trigPin, LOW);;
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8c 2f       	mov	r24, r28
 21e:	0e 94 de 06 	call	0xdbc	; 0xdbc <digitalWrite>
		duration = pulseIn(echoPin, HIGH);
 222:	20 e4       	ldi	r18, 0x40	; 64
 224:	32 e4       	ldi	r19, 0x42	; 66
 226:	4f e0       	ldi	r20, 0x0F	; 15
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	8d 2f       	mov	r24, r29
 22e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <pulseIn>
		distance = (duration/2) / 29.1;
 232:	22 e0       	ldi	r18, 0x02	; 2
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	0e 94 63 07 	call	0xec6	; 0xec6 <__divmodsi4>
 23e:	ca 01       	movw	r24, r20
 240:	b9 01       	movw	r22, r18
 242:	0e 94 00 03 	call	0x600	; 0x600 <__floatsisf>
 246:	2d ec       	ldi	r18, 0xCD	; 205
 248:	3c ec       	ldi	r19, 0xCC	; 204
 24a:	48 ee       	ldi	r20, 0xE8	; 232
 24c:	51 e4       	ldi	r21, 0x41	; 65
 24e:	0e 94 56 02 	call	0x4ac	; 0x4ac <__divsf3>
 252:	0e 94 c8 02 	call	0x590	; 0x590 <__fixsfsi>
		
		if ((distance < 10)) {  // This is where the LED On/Off happens
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	6a 30       	cpi	r22, 0x0A	; 10
 25a:	71 05       	cpc	r23, r1
 25c:	81 05       	cpc	r24, r1
 25e:	91 05       	cpc	r25, r1
 260:	0c f0       	brlt	.+2      	; 0x264 <_Z8isActivei+0x7c>
 262:	20 e0       	ldi	r18, 0x00	; 0
		}
		else {
			return false;
		}
		return false;
}
 264:	82 2f       	mov	r24, r18
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <_Z11sendCommandc>:
void sendCommand(char command){

		Serial.print(command);
 26c:	68 2f       	mov	r22, r24
 26e:	87 e1       	ldi	r24, 0x17	; 23
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_ZN5Print5printEc>

00000276 <_Z4playv>:
}
void play(){
	sendCommand('d');	
 276:	84 e6       	ldi	r24, 0x64	; 100
 278:	0c 94 36 01 	jmp	0x26c	; 0x26c <_Z11sendCommandc>

0000027c <_Z13previous_songv>:
}
void previous_song(){
	sendCommand('c');
 27c:	83 e6       	ldi	r24, 0x63	; 99
 27e:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(100);
 282:	64 e6       	ldi	r22, 0x64	; 100
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0c 94 f7 05 	jmp	0xbee	; 0xbee <delay>

0000028e <_Z9next_Songv>:
}
void next_Song(){
	sendCommand('e');
 28e:	85 e6       	ldi	r24, 0x65	; 101
 290:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(100);	
 294:	64 e6       	ldi	r22, 0x64	; 100
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <delay>

000002a0 <_Z13reduce_volumev>:
} 

void reduce_volume(){
	sendCommand('a');
 2a0:	81 e6       	ldi	r24, 0x61	; 97
 2a2:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(delay_time);
 2a6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2aa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2ae:	07 2e       	mov	r0, r23
 2b0:	00 0c       	add	r0, r0
 2b2:	88 0b       	sbc	r24, r24
 2b4:	99 0b       	sbc	r25, r25
 2b6:	0c 94 f7 05 	jmp	0xbee	; 0xbee <delay>

000002ba <_Z15increase_volumev>:
}
void increase_volume(){
	sendCommand('b');
 2ba:	82 e6       	ldi	r24, 0x62	; 98
 2bc:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(delay_time);
 2c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2c8:	07 2e       	mov	r0, r23
 2ca:	00 0c       	add	r0, r0
 2cc:	88 0b       	sbc	r24, r24
 2ce:	99 0b       	sbc	r25, r25
 2d0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <delay>

000002d4 <_Z6isPlayii>:
}
bool isPlay(int first,int second){
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8c 01       	movw	r16, r24
 2e2:	7b 01       	movw	r14, r22
	int t = 50 ;
 2e4:	c2 e3       	ldi	r28, 0x32	; 50
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
	while (t > 0) {
		delay(20);
 2e8:	64 e1       	ldi	r22, 0x14	; 20
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 f7 05 	call	0xbee	; 0xbee <delay>
		t = t-1 ;
 2f4:	21 97       	sbiw	r28, 0x01	; 1
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
 2f6:	c8 01       	movw	r24, r16
 2f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 2fc:	81 11       	cpse	r24, r1
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <_Z6isPlayii+0x36>
 300:	c2 30       	cpi	r28, 0x02	; 2
 302:	d1 05       	cpc	r29, r1
 304:	3c f0       	brlt	.+14     	; 0x314 <_Z6isPlayii+0x40>
			return false;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 c0       	rjmp	.+16     	; 0x31a <_Z6isPlayii+0x46>
bool isPlay(int first,int second){
	int t = 50 ;
	while (t > 0) {
		delay(20);
		t = t-1 ;
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
 30a:	c7 01       	movw	r24, r14
 30c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 310:	88 23       	and	r24, r24
 312:	b1 f3       	breq	.-20     	; 0x300 <_Z6isPlayii+0x2c>
	sendCommand('b');
	delay(delay_time);
}
bool isPlay(int first,int second){
	int t = 50 ;
	while (t > 0) {
 314:	20 97       	sbiw	r28, 0x00	; 0
 316:	41 f7       	brne	.-48     	; 0x2e8 <_Z6isPlayii+0x14>
		t = t-1 ;
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
			return false;
		}
	}
	return true ;
 318:	81 e0       	ldi	r24, 0x01	; 1
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	08 95       	ret

00000328 <loop>:
		bool break_flag;
		int first_sensor;
		int second_sensor;
		int t;
		int x;
		digitalWrite(10, LOW);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	0e 94 de 06 	call	0xdbc	; 0xdbc <digitalWrite>
		reduce_volume();
 330:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z13reduce_volumev>
		first_sensor = 1;
		second_sensor = 2;
		if (debug){
 334:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 338:	88 23       	and	r24, r24
 33a:	19 f0       	breq	.+6      	; 0x342 <loop+0x1a>
			sendCommand('s');		
 33c:	83 e7       	ldi	r24, 0x73	; 115
 33e:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
		}
		while (1){
			digitalWrite(10, LOW);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	0e 94 de 06 	call	0xdbc	; 0xdbc <digitalWrite>
			while (1){
				delay(5);
 34a:	65 e0       	ldi	r22, 0x05	; 5
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 f7 05 	call	0xbee	; 0xbee <delay>
				if (isActive(1)) {
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 35e:	88 23       	and	r24, r24
 360:	49 f0       	breq	.+18     	; 0x374 <loop+0x4c>
					digitalWrite(10, HIGH);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	8a e0       	ldi	r24, 0x0A	; 10
 366:	0e 94 de 06 	call	0xdbc	; 0xdbc <digitalWrite>
					first_sensor = 1;
					second_sensor = 2;           // check if the input is HIGH
 36a:	02 e0       	ldi	r16, 0x02	; 2
 36c:	10 e0       	ldi	r17, 0x00	; 0
			digitalWrite(10, LOW);
			while (1){
				delay(5);
				if (isActive(1)) {
					digitalWrite(10, HIGH);
					first_sensor = 1;
 36e:	c1 e0       	ldi	r28, 0x01	; 1
 370:	d0 e0       	ldi	r29, 0x00	; 0
					second_sensor = 2;           // check if the input is HIGH
					break;
 372:	0e c0       	rjmp	.+28     	; 0x390 <loop+0x68>
				}
				if (isActive(2)) {  
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 37c:	88 23       	and	r24, r24
 37e:	29 f3       	breq	.-54     	; 0x34a <loop+0x22>
					          // check if the input is HIGH
					digitalWrite(10, HIGH);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	0e 94 de 06 	call	0xdbc	; 0xdbc <digitalWrite>
					first_sensor = 2;
					second_sensor = 1;
 388:	01 e0       	ldi	r16, 0x01	; 1
 38a:	10 e0       	ldi	r17, 0x00	; 0
					break;
				}
				if (isActive(2)) {  
					          // check if the input is HIGH
					digitalWrite(10, HIGH);
					first_sensor = 2;
 38c:	c2 e0       	ldi	r28, 0x02	; 2
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	c8 2e       	mov	r12, r24
 394:	d1 2c       	mov	r13, r1
					break;
				}
				
			}
			t = 5 ;
			x = 10 ;
 396:	9a e0       	ldi	r25, 0x0A	; 10
 398:	e9 2e       	mov	r14, r25
 39a:	f1 2c       	mov	r15, r1
			break_flag = false;
			//digitalWrite(10, HIGH);
			while (t > 0){
				delay(5);
 39c:	65 e0       	ldi	r22, 0x05	; 5
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 f7 05 	call	0xbee	; 0xbee <delay>
				while (x > 0) {
 3a8:	e1 14       	cp	r14, r1
 3aa:	f1 04       	cpc	r15, r1
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <loop+0x88>
 3ae:	5d c0       	rjmp	.+186    	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
					if (isActive(second_sensor)) {
 3b0:	c8 01       	movw	r24, r16
 3b2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 3b6:	88 23       	and	r24, r24
 3b8:	09 f4       	brne	.+2      	; 0x3bc <loop+0x94>
 3ba:	3f c0       	rjmp	.+126    	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
						if (second_sensor == 1){
 3bc:	01 30       	cpi	r16, 0x01	; 1
 3be:	11 05       	cpc	r17, r1
 3c0:	f1 f4       	brne	.+60     	; 0x3fe <loop+0xd6>
							
							if (isPlay(first_sensor,second_sensor)) {
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	ce 01       	movw	r24, r28
 3c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z6isPlayii>
 3cc:	88 23       	and	r24, r24
 3ce:	a1 f0       	breq	.+40     	; 0x3f8 <loop+0xd0>
								play();
 3d0:	0e 94 3b 01 	call	0x276	; 0x276 <_Z4playv>
								while (isActive(first_sensor) && isActive(second_sensor)) {
 3d4:	ce 01       	movw	r24, r28
 3d6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 3da:	88 23       	and	r24, r24
 3dc:	c1 f1       	breq	.+112    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 3e6:	88 23       	and	r24, r24
 3e8:	91 f1       	breq	.+100    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
									delay(15);
 3ea:	6f e0       	ldi	r22, 0x0F	; 15
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 f7 05 	call	0xbee	; 0xbee <delay>
 3f6:	ee cf       	rjmp	.-36     	; 0x3d4 <loop+0xac>
								break_flag = true;
								break;	
							}
							
							// previous Song
							previous_song();
 3f8:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z13previous_songv>
							break_flag = true;
							break;
 3fc:	28 c0       	rjmp	.+80     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
						}
						if (second_sensor == 2){
							
							if (isPlay(first_sensor,second_sensor)) {
 3fe:	62 e0       	ldi	r22, 0x02	; 2
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	ce 01       	movw	r24, r28
 404:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z6isPlayii>
 408:	88 23       	and	r24, r24
 40a:	a1 f0       	breq	.+40     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
								play();
 40c:	0e 94 3b 01 	call	0x276	; 0x276 <_Z4playv>
								while (isActive(first_sensor) && isActive(second_sensor)) {
 410:	ce 01       	movw	r24, r28
 412:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 416:	88 23       	and	r24, r24
 418:	d1 f0       	breq	.+52     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 422:	88 23       	and	r24, r24
 424:	a1 f0       	breq	.+40     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
									delay(15);
 426:	6f e0       	ldi	r22, 0x0F	; 15
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 f7 05 	call	0xbee	; 0xbee <delay>
 432:	ee cf       	rjmp	.-36     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
								break_flag = true;
								break;
							}
							
							// Next Song
							next_Song();
 434:	0e 94 47 01 	call	0x28e	; 0x28e <_Z9next_Songv>
							break_flag = true;
							break;
 438:	0a c0       	rjmp	.+20     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
						}
					}
				delay(5);
 43a:	65 e0       	ldi	r22, 0x05	; 5
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 f7 05 	call	0xbee	; 0xbee <delay>
				x = x-1;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	e8 1a       	sub	r14, r24
 44a:	f1 08       	sbc	r15, r1
 44c:	ad cf       	rjmp	.-166    	; 0x3a8 <loop+0x80>
			}
			if (break_flag){
				if (debug){
 44e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 452:	88 23       	and	r24, r24
 454:	19 f0       	breq	.+6      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
					sendCommand('2');;
 456:	82 e3       	ldi	r24, 0x32	; 50
 458:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
				}
				delay(100);
 45c:	64 e6       	ldi	r22, 0x64	; 100
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 f7 05 	call	0xbee	; 0xbee <delay>
				break;
 468:	6c cf       	rjmp	.-296    	; 0x342 <loop+0x1a>
			sendCommand('3');
			delay(100);
			break;
		}
		*/
		if (isActive(first_sensor)){
 46a:	ce 01       	movw	r24, r28
 46c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 470:	88 23       	and	r24, r24
 472:	b1 f0       	breq	.+44     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
			if (first_sensor == 1){
 474:	21 97       	sbiw	r28, 0x01	; 1
 476:	51 f4       	brne	.+20     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
				while (isActive(first_sensor)) {
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 480:	88 23       	and	r24, r24
 482:	09 f4       	brne	.+2      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
 484:	5e cf       	rjmp	.-324    	; 0x342 <loop+0x1a>
					reduce_volume();
 486:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z13reduce_volumev>
 48a:	f6 cf       	rjmp	.-20     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
				}
				break;
				
			}
			if (first_sensor == 2){
				while (isActive(first_sensor)){
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 494:	88 23       	and	r24, r24
 496:	09 f4       	brne	.+2      	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
 498:	54 cf       	rjmp	.-344    	; 0x342 <loop+0x1a>
					
					increase_volume();
 49a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z15increase_volumev>
 49e:	f6 cf       	rjmp	.-20     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	c8 1a       	sub	r12, r24
 4a4:	d1 08       	sbc	r13, r1
			}
			t = 5 ;
			x = 10 ;
			break_flag = false;
			//digitalWrite(10, HIGH);
			while (t > 0){
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
 4a8:	79 cf       	rjmp	.-270    	; 0x39c <loop+0x74>
 4aa:	4b cf       	rjmp	.-362    	; 0x342 <loop+0x1a>

000004ac <__divsf3>:
 4ac:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__divsf3x>
 4b0:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_round>
 4b4:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_pscB>
 4b8:	58 f0       	brcs	.+22     	; 0x4d0 <__divsf3+0x24>
 4ba:	0e 94 44 03 	call	0x688	; 0x688 <__fp_pscA>
 4be:	40 f0       	brcs	.+16     	; 0x4d0 <__divsf3+0x24>
 4c0:	29 f4       	brne	.+10     	; 0x4cc <__divsf3+0x20>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <__divsf3+0x24>
 4c6:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_inf>
 4ca:	51 11       	cpse	r21, r1
 4cc:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>
 4d0:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_nan>

000004d4 <__divsf3x>:
 4d4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_split3>
 4d8:	68 f3       	brcs	.-38     	; 0x4b4 <__divsf3+0x8>

000004da <__divsf3_pse>:
 4da:	99 23       	and	r25, r25
 4dc:	b1 f3       	breq	.-20     	; 0x4ca <__divsf3+0x1e>
 4de:	55 23       	and	r21, r21
 4e0:	91 f3       	breq	.-28     	; 0x4c6 <__divsf3+0x1a>
 4e2:	95 1b       	sub	r25, r21
 4e4:	55 0b       	sbc	r21, r21
 4e6:	bb 27       	eor	r27, r27
 4e8:	aa 27       	eor	r26, r26
 4ea:	62 17       	cp	r22, r18
 4ec:	73 07       	cpc	r23, r19
 4ee:	84 07       	cpc	r24, r20
 4f0:	38 f0       	brcs	.+14     	; 0x500 <__divsf3_pse+0x26>
 4f2:	9f 5f       	subi	r25, 0xFF	; 255
 4f4:	5f 4f       	sbci	r21, 0xFF	; 255
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	44 1f       	adc	r20, r20
 4fc:	aa 1f       	adc	r26, r26
 4fe:	a9 f3       	breq	.-22     	; 0x4ea <__divsf3_pse+0x10>
 500:	35 d0       	rcall	.+106    	; 0x56c <__divsf3_pse+0x92>
 502:	0e 2e       	mov	r0, r30
 504:	3a f0       	brmi	.+14     	; 0x514 <__divsf3_pse+0x3a>
 506:	e0 e8       	ldi	r30, 0x80	; 128
 508:	32 d0       	rcall	.+100    	; 0x56e <__divsf3_pse+0x94>
 50a:	91 50       	subi	r25, 0x01	; 1
 50c:	50 40       	sbci	r21, 0x00	; 0
 50e:	e6 95       	lsr	r30
 510:	00 1c       	adc	r0, r0
 512:	ca f7       	brpl	.-14     	; 0x506 <__divsf3_pse+0x2c>
 514:	2b d0       	rcall	.+86     	; 0x56c <__divsf3_pse+0x92>
 516:	fe 2f       	mov	r31, r30
 518:	29 d0       	rcall	.+82     	; 0x56c <__divsf3_pse+0x92>
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	bb 1f       	adc	r27, r27
 522:	26 17       	cp	r18, r22
 524:	37 07       	cpc	r19, r23
 526:	48 07       	cpc	r20, r24
 528:	ab 07       	cpc	r26, r27
 52a:	b0 e8       	ldi	r27, 0x80	; 128
 52c:	09 f0       	breq	.+2      	; 0x530 <__divsf3_pse+0x56>
 52e:	bb 0b       	sbc	r27, r27
 530:	80 2d       	mov	r24, r0
 532:	bf 01       	movw	r22, r30
 534:	ff 27       	eor	r31, r31
 536:	93 58       	subi	r25, 0x83	; 131
 538:	5f 4f       	sbci	r21, 0xFF	; 255
 53a:	3a f0       	brmi	.+14     	; 0x54a <__divsf3_pse+0x70>
 53c:	9e 3f       	cpi	r25, 0xFE	; 254
 53e:	51 05       	cpc	r21, r1
 540:	78 f0       	brcs	.+30     	; 0x560 <__divsf3_pse+0x86>
 542:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_inf>
 546:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>
 54a:	5f 3f       	cpi	r21, 0xFF	; 255
 54c:	e4 f3       	brlt	.-8      	; 0x546 <__divsf3_pse+0x6c>
 54e:	98 3e       	cpi	r25, 0xE8	; 232
 550:	d4 f3       	brlt	.-12     	; 0x546 <__divsf3_pse+0x6c>
 552:	86 95       	lsr	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b7 95       	ror	r27
 55a:	f7 95       	ror	r31
 55c:	9f 5f       	subi	r25, 0xFF	; 255
 55e:	c9 f7       	brne	.-14     	; 0x552 <__divsf3_pse+0x78>
 560:	88 0f       	add	r24, r24
 562:	91 1d       	adc	r25, r1
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret
 56c:	e1 e0       	ldi	r30, 0x01	; 1
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	bb 1f       	adc	r27, r27
 576:	62 17       	cp	r22, r18
 578:	73 07       	cpc	r23, r19
 57a:	84 07       	cpc	r24, r20
 57c:	ba 07       	cpc	r27, r26
 57e:	20 f0       	brcs	.+8      	; 0x588 <__divsf3_pse+0xae>
 580:	62 1b       	sub	r22, r18
 582:	73 0b       	sbc	r23, r19
 584:	84 0b       	sbc	r24, r20
 586:	ba 0b       	sbc	r27, r26
 588:	ee 1f       	adc	r30, r30
 58a:	88 f7       	brcc	.-30     	; 0x56e <__divsf3_pse+0x94>
 58c:	e0 95       	com	r30
 58e:	08 95       	ret

00000590 <__fixsfsi>:
 590:	0e 94 cf 02 	call	0x59e	; 0x59e <__fixunssfsi>
 594:	68 94       	set
 596:	b1 11       	cpse	r27, r1
 598:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>
 59c:	08 95       	ret

0000059e <__fixunssfsi>:
 59e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_splitA>
 5a2:	88 f0       	brcs	.+34     	; 0x5c6 <__fixunssfsi+0x28>
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	98 f0       	brcs	.+38     	; 0x5ce <__fixunssfsi+0x30>
 5a8:	b9 2f       	mov	r27, r25
 5aa:	99 27       	eor	r25, r25
 5ac:	b7 51       	subi	r27, 0x17	; 23
 5ae:	b0 f0       	brcs	.+44     	; 0x5dc <__fixunssfsi+0x3e>
 5b0:	e1 f0       	breq	.+56     	; 0x5ea <__fixunssfsi+0x4c>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	1a f0       	brmi	.+6      	; 0x5c2 <__fixunssfsi+0x24>
 5bc:	ba 95       	dec	r27
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__fixunssfsi+0x14>
 5c0:	14 c0       	rjmp	.+40     	; 0x5ea <__fixunssfsi+0x4c>
 5c2:	b1 30       	cpi	r27, 0x01	; 1
 5c4:	91 f0       	breq	.+36     	; 0x5ea <__fixunssfsi+0x4c>
 5c6:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_zero>
 5ca:	b1 e0       	ldi	r27, 0x01	; 1
 5cc:	08 95       	ret
 5ce:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_zero>
 5d2:	67 2f       	mov	r22, r23
 5d4:	78 2f       	mov	r23, r24
 5d6:	88 27       	eor	r24, r24
 5d8:	b8 5f       	subi	r27, 0xF8	; 248
 5da:	39 f0       	breq	.+14     	; 0x5ea <__fixunssfsi+0x4c>
 5dc:	b9 3f       	cpi	r27, 0xF9	; 249
 5de:	cc f3       	brlt	.-14     	; 0x5d2 <__fixunssfsi+0x34>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b3 95       	inc	r27
 5e8:	d9 f7       	brne	.-10     	; 0x5e0 <__fixunssfsi+0x42>
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__fixunssfsi+0x5c>
 5ec:	90 95       	com	r25
 5ee:	80 95       	com	r24
 5f0:	70 95       	com	r23
 5f2:	61 95       	neg	r22
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	08 95       	ret

000005fc <__floatunsisf>:
 5fc:	e8 94       	clt
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <__floatsisf+0x12>

00000600 <__floatsisf>:
 600:	97 fb       	bst	r25, 7
 602:	3e f4       	brtc	.+14     	; 0x612 <__floatsisf+0x12>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	99 23       	and	r25, r25
 614:	a9 f0       	breq	.+42     	; 0x640 <__floatsisf+0x40>
 616:	f9 2f       	mov	r31, r25
 618:	96 e9       	ldi	r25, 0x96	; 150
 61a:	bb 27       	eor	r27, r27
 61c:	93 95       	inc	r25
 61e:	f6 95       	lsr	r31
 620:	87 95       	ror	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f1 11       	cpse	r31, r1
 62a:	f8 cf       	rjmp	.-16     	; 0x61c <__floatsisf+0x1c>
 62c:	fa f4       	brpl	.+62     	; 0x66c <__floatsisf+0x6c>
 62e:	bb 0f       	add	r27, r27
 630:	11 f4       	brne	.+4      	; 0x636 <__floatsisf+0x36>
 632:	60 ff       	sbrs	r22, 0
 634:	1b c0       	rjmp	.+54     	; 0x66c <__floatsisf+0x6c>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	16 c0       	rjmp	.+44     	; 0x66c <__floatsisf+0x6c>
 640:	88 23       	and	r24, r24
 642:	11 f0       	breq	.+4      	; 0x648 <__floatsisf+0x48>
 644:	96 e9       	ldi	r25, 0x96	; 150
 646:	11 c0       	rjmp	.+34     	; 0x66a <__floatsisf+0x6a>
 648:	77 23       	and	r23, r23
 64a:	21 f0       	breq	.+8      	; 0x654 <__floatsisf+0x54>
 64c:	9e e8       	ldi	r25, 0x8E	; 142
 64e:	87 2f       	mov	r24, r23
 650:	76 2f       	mov	r23, r22
 652:	05 c0       	rjmp	.+10     	; 0x65e <__floatsisf+0x5e>
 654:	66 23       	and	r22, r22
 656:	71 f0       	breq	.+28     	; 0x674 <__floatsisf+0x74>
 658:	96 e8       	ldi	r25, 0x86	; 134
 65a:	86 2f       	mov	r24, r22
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	2a f0       	brmi	.+10     	; 0x66c <__floatsisf+0x6c>
 662:	9a 95       	dec	r25
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	da f7       	brpl	.-10     	; 0x662 <__floatsisf+0x62>
 66c:	88 0f       	add	r24, r24
 66e:	96 95       	lsr	r25
 670:	87 95       	ror	r24
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret

00000676 <__fp_inf>:
 676:	97 f9       	bld	r25, 7
 678:	9f 67       	ori	r25, 0x7F	; 127
 67a:	80 e8       	ldi	r24, 0x80	; 128
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	08 95       	ret

00000682 <__fp_nan>:
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	80 ec       	ldi	r24, 0xC0	; 192
 686:	08 95       	ret

00000688 <__fp_pscA>:
 688:	00 24       	eor	r0, r0
 68a:	0a 94       	dec	r0
 68c:	16 16       	cp	r1, r22
 68e:	17 06       	cpc	r1, r23
 690:	18 06       	cpc	r1, r24
 692:	09 06       	cpc	r0, r25
 694:	08 95       	ret

00000696 <__fp_pscB>:
 696:	00 24       	eor	r0, r0
 698:	0a 94       	dec	r0
 69a:	12 16       	cp	r1, r18
 69c:	13 06       	cpc	r1, r19
 69e:	14 06       	cpc	r1, r20
 6a0:	05 06       	cpc	r0, r21
 6a2:	08 95       	ret

000006a4 <__fp_round>:
 6a4:	09 2e       	mov	r0, r25
 6a6:	03 94       	inc	r0
 6a8:	00 0c       	add	r0, r0
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__fp_round+0xc>
 6ac:	88 23       	and	r24, r24
 6ae:	52 f0       	brmi	.+20     	; 0x6c4 <__fp_round+0x20>
 6b0:	bb 0f       	add	r27, r27
 6b2:	40 f4       	brcc	.+16     	; 0x6c4 <__fp_round+0x20>
 6b4:	bf 2b       	or	r27, r31
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__fp_round+0x18>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <__fp_round+0x20>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	08 95       	ret

000006c6 <__fp_split3>:
 6c6:	57 fd       	sbrc	r21, 7
 6c8:	90 58       	subi	r25, 0x80	; 128
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	59 f0       	breq	.+22     	; 0x6e6 <__fp_splitA+0x10>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	71 f0       	breq	.+28     	; 0x6f0 <__fp_splitA+0x1a>
 6d4:	47 95       	ror	r20

000006d6 <__fp_splitA>:
 6d6:	88 0f       	add	r24, r24
 6d8:	97 fb       	bst	r25, 7
 6da:	99 1f       	adc	r25, r25
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <__fp_splitA+0x20>
 6de:	9f 3f       	cpi	r25, 0xFF	; 255
 6e0:	79 f0       	breq	.+30     	; 0x700 <__fp_splitA+0x2a>
 6e2:	87 95       	ror	r24
 6e4:	08 95       	ret
 6e6:	12 16       	cp	r1, r18
 6e8:	13 06       	cpc	r1, r19
 6ea:	14 06       	cpc	r1, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	f2 cf       	rjmp	.-28     	; 0x6d4 <__fp_split3+0xe>
 6f0:	46 95       	lsr	r20
 6f2:	f1 df       	rcall	.-30     	; 0x6d6 <__fp_splitA>
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <__fp_splitA+0x30>
 6f6:	16 16       	cp	r1, r22
 6f8:	17 06       	cpc	r1, r23
 6fa:	18 06       	cpc	r1, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	f1 cf       	rjmp	.-30     	; 0x6e2 <__fp_splitA+0xc>
 700:	86 95       	lsr	r24
 702:	71 05       	cpc	r23, r1
 704:	61 05       	cpc	r22, r1
 706:	08 94       	sec
 708:	08 95       	ret

0000070a <__fp_zero>:
 70a:	e8 94       	clt

0000070c <__fp_szero>:
 70c:	bb 27       	eor	r27, r27
 70e:	66 27       	eor	r22, r22
 710:	77 27       	eor	r23, r23
 712:	cb 01       	movw	r24, r22
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret

00000718 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 718:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 71a:	91 8d       	ldd	r25, Z+25	; 0x19
 71c:	22 8d       	ldd	r18, Z+26	; 0x1a
 71e:	89 2f       	mov	r24, r25
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	80 5c       	subi	r24, 0xC0	; 192
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	82 1b       	sub	r24, r18
 728:	91 09       	sbc	r25, r1
}
 72a:	8f 73       	andi	r24, 0x3F	; 63
 72c:	99 27       	eor	r25, r25
 72e:	08 95       	ret

00000730 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 730:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 732:	91 8d       	ldd	r25, Z+25	; 0x19
 734:	82 8d       	ldd	r24, Z+26	; 0x1a
 736:	98 17       	cp	r25, r24
 738:	31 f0       	breq	.+12     	; 0x746 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 73a:	82 8d       	ldd	r24, Z+26	; 0x1a
 73c:	e8 0f       	add	r30, r24
 73e:	f1 1d       	adc	r31, r1
 740:	85 8d       	ldd	r24, Z+29	; 0x1d
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 74a:	08 95       	ret

0000074c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 74c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 74e:	91 8d       	ldd	r25, Z+25	; 0x19
 750:	82 8d       	ldd	r24, Z+26	; 0x1a
 752:	98 17       	cp	r25, r24
 754:	61 f0       	breq	.+24     	; 0x76e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 756:	82 8d       	ldd	r24, Z+26	; 0x1a
 758:	df 01       	movw	r26, r30
 75a:	a8 0f       	add	r26, r24
 75c:	b1 1d       	adc	r27, r1
 75e:	5d 96       	adiw	r26, 0x1d	; 29
 760:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 762:	92 8d       	ldd	r25, Z+26	; 0x1a
 764:	9f 5f       	subi	r25, 0xFF	; 255
 766:	9f 73       	andi	r25, 0x3F	; 63
 768:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 772:	08 95       	ret

00000774 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 774:	8f e0       	ldi	r24, 0x0F	; 15
 776:	95 e0       	ldi	r25, 0x05	; 5
 778:	89 2b       	or	r24, r25
 77a:	49 f0       	breq	.+18     	; 0x78e <_Z14serialEventRunv+0x1a>
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	89 2b       	or	r24, r25
 782:	29 f0       	breq	.+10     	; 0x78e <_Z14serialEventRunv+0x1a>
 784:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_Z17Serial0_availablev>
 788:	81 11       	cpse	r24, r1
 78a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 78e:	08 95       	ret

00000790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 790:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 792:	84 8d       	ldd	r24, Z+28	; 0x1c
 794:	df 01       	movw	r26, r30
 796:	a8 0f       	add	r26, r24
 798:	b1 1d       	adc	r27, r1
 79a:	a3 5a       	subi	r26, 0xA3	; 163
 79c:	bf 4f       	sbci	r27, 0xFF	; 255
 79e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 7a0:	84 8d       	ldd	r24, Z+28	; 0x1c
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	8f 73       	andi	r24, 0x3F	; 63
 7a8:	99 27       	eor	r25, r25
 7aa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 7ac:	a6 89       	ldd	r26, Z+22	; 0x16
 7ae:	b7 89       	ldd	r27, Z+23	; 0x17
 7b0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 7b2:	a0 89       	ldd	r26, Z+16	; 0x10
 7b4:	b1 89       	ldd	r27, Z+17	; 0x11
 7b6:	8c 91       	ld	r24, X
 7b8:	80 64       	ori	r24, 0x40	; 64
 7ba:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 7bc:	93 8d       	ldd	r25, Z+27	; 0x1b
 7be:	84 8d       	ldd	r24, Z+28	; 0x1c
 7c0:	98 13       	cpse	r25, r24
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 7c4:	02 88       	ldd	r0, Z+18	; 0x12
 7c6:	f3 89       	ldd	r31, Z+19	; 0x13
 7c8:	e0 2d       	mov	r30, r0
 7ca:	80 81       	ld	r24, Z
 7cc:	8f 7d       	andi	r24, 0xDF	; 223
 7ce:	80 83       	st	Z, r24
 7d0:	08 95       	ret

000007d2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 7d8:	88 8d       	ldd	r24, Y+24	; 0x18
 7da:	88 23       	and	r24, r24
 7dc:	c9 f0       	breq	.+50     	; 0x810 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 7de:	ea 89       	ldd	r30, Y+18	; 0x12
 7e0:	fb 89       	ldd	r31, Y+19	; 0x13
 7e2:	80 81       	ld	r24, Z
 7e4:	85 fd       	sbrc	r24, 5
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <_ZN14HardwareSerial5flushEv+0x20>
 7e8:	a8 89       	ldd	r26, Y+16	; 0x10
 7ea:	b9 89       	ldd	r27, Y+17	; 0x11
 7ec:	8c 91       	ld	r24, X
 7ee:	86 fd       	sbrc	r24, 6
 7f0:	0f c0       	rjmp	.+30     	; 0x810 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	07 fc       	sbrc	r0, 7
 7f6:	f5 cf       	rjmp	.-22     	; 0x7e2 <_ZN14HardwareSerial5flushEv+0x10>
 7f8:	80 81       	ld	r24, Z
 7fa:	85 ff       	sbrs	r24, 5
 7fc:	f2 cf       	rjmp	.-28     	; 0x7e2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 7fe:	a8 89       	ldd	r26, Y+16	; 0x10
 800:	b9 89       	ldd	r27, Y+17	; 0x11
 802:	8c 91       	ld	r24, X
 804:	85 ff       	sbrs	r24, 5
 806:	ed cf       	rjmp	.-38     	; 0x7e2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 808:	ce 01       	movw	r24, r28
 80a:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 80e:	e7 cf       	rjmp	.-50     	; 0x7de <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	08 95       	ret

00000816 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 816:	ef 92       	push	r14
 818:	ff 92       	push	r15
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	ec 01       	movw	r28, r24
  _written = true;
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 828:	9b 8d       	ldd	r25, Y+27	; 0x1b
 82a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 82c:	98 13       	cpse	r25, r24
 82e:	05 c0       	rjmp	.+10     	; 0x83a <_ZN14HardwareSerial5writeEh+0x24>
 830:	e8 89       	ldd	r30, Y+16	; 0x10
 832:	f9 89       	ldd	r31, Y+17	; 0x11
 834:	80 81       	ld	r24, Z
 836:	85 fd       	sbrc	r24, 5
 838:	24 c0       	rjmp	.+72     	; 0x882 <_ZN14HardwareSerial5writeEh+0x6c>
 83a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 83c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 83e:	10 e0       	ldi	r17, 0x00	; 0
 840:	0f 5f       	subi	r16, 0xFF	; 255
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	0f 73       	andi	r16, 0x3F	; 63
 846:	11 27       	eor	r17, r17
 848:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 84a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 84c:	e8 12       	cpse	r14, r24
 84e:	0c c0       	rjmp	.+24     	; 0x868 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	07 fc       	sbrc	r0, 7
 854:	fa cf       	rjmp	.-12     	; 0x84a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 856:	e8 89       	ldd	r30, Y+16	; 0x10
 858:	f9 89       	ldd	r31, Y+17	; 0x11
 85a:	80 81       	ld	r24, Z
 85c:	85 ff       	sbrs	r24, 5
 85e:	f5 cf       	rjmp	.-22     	; 0x84a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 860:	ce 01       	movw	r24, r28
 862:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 866:	f1 cf       	rjmp	.-30     	; 0x84a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 868:	8b 8d       	ldd	r24, Y+27	; 0x1b
 86a:	fe 01       	movw	r30, r28
 86c:	e8 0f       	add	r30, r24
 86e:	f1 1d       	adc	r31, r1
 870:	e3 5a       	subi	r30, 0xA3	; 163
 872:	ff 4f       	sbci	r31, 0xFF	; 255
 874:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 876:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 878:	ea 89       	ldd	r30, Y+18	; 0x12
 87a:	fb 89       	ldd	r31, Y+19	; 0x13
 87c:	80 81       	ld	r24, Z
 87e:	80 62       	ori	r24, 0x20	; 32
 880:	07 c0       	rjmp	.+14     	; 0x890 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 882:	ee 89       	ldd	r30, Y+22	; 0x16
 884:	ff 89       	ldd	r31, Y+23	; 0x17
 886:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 888:	e8 89       	ldd	r30, Y+16	; 0x10
 88a:	f9 89       	ldd	r31, Y+17	; 0x11
 88c:	80 81       	ld	r24, Z
 88e:	80 64       	ori	r24, 0x40	; 64
 890:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	08 95       	ret

000008a4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 8a4:	cf 92       	push	r12
 8a6:	df 92       	push	r13
 8a8:	ef 92       	push	r14
 8aa:	ff 92       	push	r15
 8ac:	1f 93       	push	r17
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	ec 01       	movw	r28, r24
 8b4:	6a 01       	movw	r12, r20
 8b6:	7b 01       	movw	r14, r22
 8b8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 8ba:	e8 89       	ldd	r30, Y+16	; 0x10
 8bc:	f9 89       	ldd	r31, Y+17	; 0x11
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 8c2:	41 15       	cp	r20, r1
 8c4:	51 4e       	sbci	r21, 0xE1	; 225
 8c6:	61 05       	cpc	r22, r1
 8c8:	71 05       	cpc	r23, r1
 8ca:	b1 f0       	breq	.+44     	; 0x8f8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	79 e0       	ldi	r23, 0x09	; 9
 8d0:	8d e3       	ldi	r24, 0x3D	; 61
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	a7 01       	movw	r20, r14
 8d6:	96 01       	movw	r18, r12
 8d8:	0e 94 41 07 	call	0xe82	; 0xe82 <__udivmodsi4>
 8dc:	da 01       	movw	r26, r20
 8de:	c9 01       	movw	r24, r18
 8e0:	01 97       	sbiw	r24, 0x01	; 1
 8e2:	a1 09       	sbc	r26, r1
 8e4:	b1 09       	sbc	r27, r1
 8e6:	b6 95       	lsr	r27
 8e8:	a7 95       	ror	r26
 8ea:	97 95       	ror	r25
 8ec:	87 95       	ror	r24
 8ee:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 8f0:	41 15       	cp	r20, r1
 8f2:	80 e1       	ldi	r24, 0x10	; 16
 8f4:	58 07       	cpc	r21, r24
 8f6:	a8 f0       	brcs	.+42     	; 0x922 <__stack+0x23>
  {
    *_ucsra = 0;
 8f8:	e8 89       	ldd	r30, Y+16	; 0x10
 8fa:	f9 89       	ldd	r31, Y+17	; 0x11
 8fc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 8fe:	60 e8       	ldi	r22, 0x80	; 128
 900:	74 e8       	ldi	r23, 0x84	; 132
 902:	8e e1       	ldi	r24, 0x1E	; 30
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	a7 01       	movw	r20, r14
 908:	96 01       	movw	r18, r12
 90a:	0e 94 41 07 	call	0xe82	; 0xe82 <__udivmodsi4>
 90e:	ba 01       	movw	r22, r20
 910:	a9 01       	movw	r20, r18
 912:	41 50       	subi	r20, 0x01	; 1
 914:	51 09       	sbc	r21, r1
 916:	61 09       	sbc	r22, r1
 918:	71 09       	sbc	r23, r1
 91a:	76 95       	lsr	r23
 91c:	67 95       	ror	r22
 91e:	57 95       	ror	r21
 920:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 922:	ec 85       	ldd	r30, Y+12	; 0x0c
 924:	fd 85       	ldd	r31, Y+13	; 0x0d
 926:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 928:	ee 85       	ldd	r30, Y+14	; 0x0e
 92a:	ff 85       	ldd	r31, Y+15	; 0x0f
 92c:	40 83       	st	Z, r20

  _written = false;
 92e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 930:	ec 89       	ldd	r30, Y+20	; 0x14
 932:	fd 89       	ldd	r31, Y+21	; 0x15
 934:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 936:	ea 89       	ldd	r30, Y+18	; 0x12
 938:	fb 89       	ldd	r31, Y+19	; 0x13
 93a:	80 81       	ld	r24, Z
 93c:	80 61       	ori	r24, 0x10	; 16
 93e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 940:	ea 89       	ldd	r30, Y+18	; 0x12
 942:	fb 89       	ldd	r31, Y+19	; 0x13
 944:	80 81       	ld	r24, Z
 946:	88 60       	ori	r24, 0x08	; 8
 948:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 94a:	ea 89       	ldd	r30, Y+18	; 0x12
 94c:	fb 89       	ldd	r31, Y+19	; 0x13
 94e:	80 81       	ld	r24, Z
 950:	80 68       	ori	r24, 0x80	; 128
 952:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 954:	ea 89       	ldd	r30, Y+18	; 0x12
 956:	fb 89       	ldd	r31, Y+19	; 0x13
 958:	80 81       	ld	r24, Z
 95a:	8f 7d       	andi	r24, 0xDF	; 223
 95c:	80 83       	st	Z, r24
}
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	1f 91       	pop	r17
 964:	ff 90       	pop	r15
 966:	ef 90       	pop	r14
 968:	df 90       	pop	r13
 96a:	cf 90       	pop	r12
 96c:	08 95       	ret

0000096e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 96e:	1f 92       	push	r1
 970:	0f 92       	push	r0
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	0f 92       	push	r0
 976:	11 24       	eor	r1, r1
 978:	2f 93       	push	r18
 97a:	8f 93       	push	r24
 97c:	9f 93       	push	r25
 97e:	ef 93       	push	r30
 980:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 982:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <Serial+0x10>
 986:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <Serial+0x11>
 98a:	80 81       	ld	r24, Z
 98c:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <Serial+0x16>
 990:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <Serial+0x17>
 994:	82 fd       	sbrc	r24, 2
 996:	12 c0       	rjmp	.+36     	; 0x9bc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 998:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 99a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Serial+0x19>
 99e:	8f 5f       	subi	r24, 0xFF	; 255
 9a0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 9a2:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <Serial+0x1a>
 9a6:	82 17       	cp	r24, r18
 9a8:	51 f0       	breq	.+20     	; 0x9be <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 9aa:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Serial+0x19>
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	e9 5e       	subi	r30, 0xE9	; 233
 9b2:	fe 4f       	sbci	r31, 0xFE	; 254
 9b4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 9b6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Serial+0x19>
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 9bc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 9be:	ff 91       	pop	r31
 9c0:	ef 91       	pop	r30
 9c2:	9f 91       	pop	r25
 9c4:	8f 91       	pop	r24
 9c6:	2f 91       	pop	r18
 9c8:	0f 90       	pop	r0
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	0f 90       	pop	r0
 9ce:	1f 90       	pop	r1
 9d0:	18 95       	reti

000009d2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 9d2:	1f 92       	push	r1
 9d4:	0f 92       	push	r0
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	0f 92       	push	r0
 9da:	11 24       	eor	r1, r1
 9dc:	2f 93       	push	r18
 9de:	3f 93       	push	r19
 9e0:	4f 93       	push	r20
 9e2:	5f 93       	push	r21
 9e4:	6f 93       	push	r22
 9e6:	7f 93       	push	r23
 9e8:	8f 93       	push	r24
 9ea:	9f 93       	push	r25
 9ec:	af 93       	push	r26
 9ee:	bf 93       	push	r27
 9f0:	ef 93       	push	r30
 9f2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 9f4:	87 e1       	ldi	r24, 0x17	; 23
 9f6:	91 e0       	ldi	r25, 0x01	; 1
 9f8:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 9fc:	ff 91       	pop	r31
 9fe:	ef 91       	pop	r30
 a00:	bf 91       	pop	r27
 a02:	af 91       	pop	r26
 a04:	9f 91       	pop	r25
 a06:	8f 91       	pop	r24
 a08:	7f 91       	pop	r23
 a0a:	6f 91       	pop	r22
 a0c:	5f 91       	pop	r21
 a0e:	4f 91       	pop	r20
 a10:	3f 91       	pop	r19
 a12:	2f 91       	pop	r18
 a14:	0f 90       	pop	r0
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	0f 90       	pop	r0
 a1a:	1f 90       	pop	r1
 a1c:	18 95       	reti

00000a1e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 a1e:	87 e1       	ldi	r24, 0x17	; 23
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	0e 94 8c 03 	call	0x718	; 0x718 <_ZN14HardwareSerial9availableEv>
 a26:	21 e0       	ldi	r18, 0x01	; 1
 a28:	89 2b       	or	r24, r25
 a2a:	09 f4       	brne	.+2      	; 0xa2e <_Z17Serial0_availablev+0x10>
 a2c:	20 e0       	ldi	r18, 0x00	; 0
}
 a2e:	82 2f       	mov	r24, r18
 a30:	08 95       	ret

00000a32 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 a32:	e7 e1       	ldi	r30, 0x17	; 23
 a34:	f1 e0       	ldi	r31, 0x01	; 1
 a36:	13 82       	std	Z+3, r1	; 0x03
 a38:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 a3a:	88 ee       	ldi	r24, 0xE8	; 232
 a3c:	93 e0       	ldi	r25, 0x03	; 3
 a3e:	a0 e0       	ldi	r26, 0x00	; 0
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	84 83       	std	Z+4, r24	; 0x04
 a44:	95 83       	std	Z+5, r25	; 0x05
 a46:	a6 83       	std	Z+6, r26	; 0x06
 a48:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 a4a:	8a e0       	ldi	r24, 0x0A	; 10
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	91 83       	std	Z+1, r25	; 0x01
 a50:	80 83       	st	Z, r24
 a52:	85 ec       	ldi	r24, 0xC5	; 197
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	95 87       	std	Z+13, r25	; 0x0d
 a58:	84 87       	std	Z+12, r24	; 0x0c
 a5a:	84 ec       	ldi	r24, 0xC4	; 196
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	97 87       	std	Z+15, r25	; 0x0f
 a60:	86 87       	std	Z+14, r24	; 0x0e
 a62:	80 ec       	ldi	r24, 0xC0	; 192
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	91 8b       	std	Z+17, r25	; 0x11
 a68:	80 8b       	std	Z+16, r24	; 0x10
 a6a:	81 ec       	ldi	r24, 0xC1	; 193
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	93 8b       	std	Z+19, r25	; 0x13
 a70:	82 8b       	std	Z+18, r24	; 0x12
 a72:	82 ec       	ldi	r24, 0xC2	; 194
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	95 8b       	std	Z+21, r25	; 0x15
 a78:	84 8b       	std	Z+20, r24	; 0x14
 a7a:	86 ec       	ldi	r24, 0xC6	; 198
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	97 8b       	std	Z+23, r25	; 0x17
 a80:	86 8b       	std	Z+22, r24	; 0x16
 a82:	11 8e       	std	Z+25, r1	; 0x19
 a84:	12 8e       	std	Z+26, r1	; 0x1a
 a86:	13 8e       	std	Z+27, r1	; 0x1b
 a88:	14 8e       	std	Z+28, r1	; 0x1c
 a8a:	08 95       	ret

00000a8c <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 a8c:	08 95       	ret

00000a8e <main>:

int main(void)
{
	init();
 a8e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <init>

	initVariant();
 a92:	0e 94 46 05 	call	0xa8c	; 0xa8c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 a96:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a9a:	ca eb       	ldi	r28, 0xBA	; 186
 a9c:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 a9e:	0e 94 94 01 	call	0x328	; 0x328 <loop>
		if (serialEventRun) serialEventRun();
 aa2:	20 97       	sbiw	r28, 0x00	; 0
 aa4:	e1 f3       	breq	.-8      	; 0xa9e <main+0x10>
 aa6:	0e 94 ba 03 	call	0x774	; 0x774 <_Z14serialEventRunv>
 aaa:	f9 cf       	rjmp	.-14     	; 0xa9e <main+0x10>

00000aac <_ZN5Print5writeEPKhj>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 aac:	cf 92       	push	r12
 aae:	df 92       	push	r13
 ab0:	ef 92       	push	r14
 ab2:	ff 92       	push	r15
 ab4:	0f 93       	push	r16
 ab6:	1f 93       	push	r17
 ab8:	cf 93       	push	r28
 aba:	df 93       	push	r29
 abc:	6c 01       	movw	r12, r24
 abe:	7a 01       	movw	r14, r20
 ac0:	8b 01       	movw	r16, r22
 ac2:	c0 e0       	ldi	r28, 0x00	; 0
 ac4:	d0 e0       	ldi	r29, 0x00	; 0
 ac6:	ce 15       	cp	r28, r14
 ac8:	df 05       	cpc	r29, r15
 aca:	89 f0       	breq	.+34     	; 0xaee <_ZN5Print5writeEPKhj+0x42>
 acc:	d8 01       	movw	r26, r16
 ace:	6d 91       	ld	r22, X+
 ad0:	8d 01       	movw	r16, r26
 ad2:	d6 01       	movw	r26, r12
 ad4:	ed 91       	ld	r30, X+
 ad6:	fc 91       	ld	r31, X
 ad8:	01 90       	ld	r0, Z+
 ada:	f0 81       	ld	r31, Z
 adc:	e0 2d       	mov	r30, r0
 ade:	c6 01       	movw	r24, r12
 ae0:	09 95       	icall
 ae2:	89 2b       	or	r24, r25
 ae4:	11 f4       	brne	.+4      	; 0xaea <_ZN5Print5writeEPKhj+0x3e>
 ae6:	7e 01       	movw	r14, r28
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <_ZN5Print5writeEPKhj+0x42>
 aea:	21 96       	adiw	r28, 0x01	; 1
 aec:	ec cf       	rjmp	.-40     	; 0xac6 <_ZN5Print5writeEPKhj+0x1a>
 aee:	c7 01       	movw	r24, r14
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	1f 91       	pop	r17
 af6:	0f 91       	pop	r16
 af8:	ff 90       	pop	r15
 afa:	ef 90       	pop	r14
 afc:	df 90       	pop	r13
 afe:	cf 90       	pop	r12
 b00:	08 95       	ret

00000b02 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
 b02:	dc 01       	movw	r26, r24
 b04:	ed 91       	ld	r30, X+
 b06:	fc 91       	ld	r31, X
 b08:	01 90       	ld	r0, Z+
 b0a:	f0 81       	ld	r31, Z
 b0c:	e0 2d       	mov	r30, r0
 b0e:	09 94       	ijmp

00000b10 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 b10:	1f 92       	push	r1
 b12:	0f 92       	push	r0
 b14:	0f b6       	in	r0, 0x3f	; 63
 b16:	0f 92       	push	r0
 b18:	11 24       	eor	r1, r1
 b1a:	2f 93       	push	r18
 b1c:	3f 93       	push	r19
 b1e:	8f 93       	push	r24
 b20:	9f 93       	push	r25
 b22:	af 93       	push	r26
 b24:	bf 93       	push	r27
 b26:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <timer0_millis>
 b2a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <timer0_millis+0x1>
 b2e:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <timer0_millis+0x2>
 b32:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <timer0_millis+0x3>
 b36:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <timer0_fract>
 b3a:	23 e0       	ldi	r18, 0x03	; 3
 b3c:	23 0f       	add	r18, r19
 b3e:	2d 37       	cpi	r18, 0x7D	; 125
 b40:	20 f4       	brcc	.+8      	; 0xb4a <__vector_16+0x3a>
 b42:	01 96       	adiw	r24, 0x01	; 1
 b44:	a1 1d       	adc	r26, r1
 b46:	b1 1d       	adc	r27, r1
 b48:	05 c0       	rjmp	.+10     	; 0xb54 <__vector_16+0x44>
 b4a:	26 e8       	ldi	r18, 0x86	; 134
 b4c:	23 0f       	add	r18, r19
 b4e:	02 96       	adiw	r24, 0x02	; 2
 b50:	a1 1d       	adc	r26, r1
 b52:	b1 1d       	adc	r27, r1
 b54:	20 93 b4 01 	sts	0x01B4, r18	; 0x8001b4 <timer0_fract>
 b58:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <timer0_millis>
 b5c:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <timer0_millis+0x1>
 b60:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <timer0_millis+0x2>
 b64:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <timer0_millis+0x3>
 b68:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <timer0_overflow_count>
 b6c:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <timer0_overflow_count+0x1>
 b70:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <timer0_overflow_count+0x2>
 b74:	b0 91 bc 01 	lds	r27, 0x01BC	; 0x8001bc <timer0_overflow_count+0x3>
 b78:	01 96       	adiw	r24, 0x01	; 1
 b7a:	a1 1d       	adc	r26, r1
 b7c:	b1 1d       	adc	r27, r1
 b7e:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <timer0_overflow_count>
 b82:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <timer0_overflow_count+0x1>
 b86:	a0 93 bb 01 	sts	0x01BB, r26	; 0x8001bb <timer0_overflow_count+0x2>
 b8a:	b0 93 bc 01 	sts	0x01BC, r27	; 0x8001bc <timer0_overflow_count+0x3>
 b8e:	bf 91       	pop	r27
 b90:	af 91       	pop	r26
 b92:	9f 91       	pop	r25
 b94:	8f 91       	pop	r24
 b96:	3f 91       	pop	r19
 b98:	2f 91       	pop	r18
 b9a:	0f 90       	pop	r0
 b9c:	0f be       	out	0x3f, r0	; 63
 b9e:	0f 90       	pop	r0
 ba0:	1f 90       	pop	r1
 ba2:	18 95       	reti

00000ba4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 ba4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 ba6:	f8 94       	cli
	m = timer0_overflow_count;
 ba8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <timer0_overflow_count>
 bac:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <timer0_overflow_count+0x1>
 bb0:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <timer0_overflow_count+0x2>
 bb4:	b0 91 bc 01 	lds	r27, 0x01BC	; 0x8001bc <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 bb8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 bba:	a8 9b       	sbis	0x15, 0	; 21
 bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <micros+0x24>
 bbe:	2f 3f       	cpi	r18, 0xFF	; 255
 bc0:	19 f0       	breq	.+6      	; 0xbc8 <micros+0x24>
		m++;
 bc2:	01 96       	adiw	r24, 0x01	; 1
 bc4:	a1 1d       	adc	r26, r1
 bc6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 bc8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 bca:	ba 2f       	mov	r27, r26
 bcc:	a9 2f       	mov	r26, r25
 bce:	98 2f       	mov	r25, r24
 bd0:	88 27       	eor	r24, r24
 bd2:	82 0f       	add	r24, r18
 bd4:	91 1d       	adc	r25, r1
 bd6:	a1 1d       	adc	r26, r1
 bd8:	b1 1d       	adc	r27, r1
 bda:	bc 01       	movw	r22, r24
 bdc:	cd 01       	movw	r24, r26
 bde:	42 e0       	ldi	r20, 0x02	; 2
 be0:	66 0f       	add	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	99 1f       	adc	r25, r25
 be8:	4a 95       	dec	r20
 bea:	d1 f7       	brne	.-12     	; 0xbe0 <micros+0x3c>
}
 bec:	08 95       	ret

00000bee <delay>:

void delay(unsigned long ms)
{
 bee:	8f 92       	push	r8
 bf0:	9f 92       	push	r9
 bf2:	af 92       	push	r10
 bf4:	bf 92       	push	r11
 bf6:	cf 92       	push	r12
 bf8:	df 92       	push	r13
 bfa:	ef 92       	push	r14
 bfc:	ff 92       	push	r15
 bfe:	6b 01       	movw	r12, r22
 c00:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 c02:	0e 94 d2 05 	call	0xba4	; 0xba4 <micros>
 c06:	4b 01       	movw	r8, r22
 c08:	5c 01       	movw	r10, r24

	while (ms > 0) {
 c0a:	c1 14       	cp	r12, r1
 c0c:	d1 04       	cpc	r13, r1
 c0e:	e1 04       	cpc	r14, r1
 c10:	f1 04       	cpc	r15, r1
 c12:	01 f1       	breq	.+64     	; 0xc54 <delay+0x66>
		yield();
 c14:	0e 94 40 07 	call	0xe80	; 0xe80 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 c18:	0e 94 d2 05 	call	0xba4	; 0xba4 <micros>
 c1c:	dc 01       	movw	r26, r24
 c1e:	cb 01       	movw	r24, r22
 c20:	88 19       	sub	r24, r8
 c22:	99 09       	sbc	r25, r9
 c24:	aa 09       	sbc	r26, r10
 c26:	bb 09       	sbc	r27, r11
 c28:	88 3e       	cpi	r24, 0xE8	; 232
 c2a:	93 40       	sbci	r25, 0x03	; 3
 c2c:	a1 05       	cpc	r26, r1
 c2e:	b1 05       	cpc	r27, r1
 c30:	60 f3       	brcs	.-40     	; 0xc0a <delay+0x1c>
			ms--;
 c32:	21 e0       	ldi	r18, 0x01	; 1
 c34:	c2 1a       	sub	r12, r18
 c36:	d1 08       	sbc	r13, r1
 c38:	e1 08       	sbc	r14, r1
 c3a:	f1 08       	sbc	r15, r1
			start += 1000;
 c3c:	88 ee       	ldi	r24, 0xE8	; 232
 c3e:	88 0e       	add	r8, r24
 c40:	83 e0       	ldi	r24, 0x03	; 3
 c42:	98 1e       	adc	r9, r24
 c44:	a1 1c       	adc	r10, r1
 c46:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 c48:	c1 14       	cp	r12, r1
 c4a:	d1 04       	cpc	r13, r1
 c4c:	e1 04       	cpc	r14, r1
 c4e:	f1 04       	cpc	r15, r1
 c50:	19 f7       	brne	.-58     	; 0xc18 <delay+0x2a>
 c52:	db cf       	rjmp	.-74     	; 0xc0a <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 c54:	ff 90       	pop	r15
 c56:	ef 90       	pop	r14
 c58:	df 90       	pop	r13
 c5a:	cf 90       	pop	r12
 c5c:	bf 90       	pop	r11
 c5e:	af 90       	pop	r10
 c60:	9f 90       	pop	r9
 c62:	8f 90       	pop	r8
 c64:	08 95       	ret

00000c66 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 c66:	82 30       	cpi	r24, 0x02	; 2
 c68:	91 05       	cpc	r25, r1
 c6a:	38 f0       	brcs	.+14     	; 0xc7a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 c6c:	88 0f       	add	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	88 0f       	add	r24, r24
 c72:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 c74:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 c76:	01 97       	sbiw	r24, 0x01	; 1
 c78:	f1 f7       	brne	.-4      	; 0xc76 <delayMicroseconds+0x10>
 c7a:	08 95       	ret

00000c7c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 c7c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 c7e:	84 b5       	in	r24, 0x24	; 36
 c80:	82 60       	ori	r24, 0x02	; 2
 c82:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 c84:	84 b5       	in	r24, 0x24	; 36
 c86:	81 60       	ori	r24, 0x01	; 1
 c88:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 c8a:	85 b5       	in	r24, 0x25	; 37
 c8c:	82 60       	ori	r24, 0x02	; 2
 c8e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 c90:	85 b5       	in	r24, 0x25	; 37
 c92:	81 60       	ori	r24, 0x01	; 1
 c94:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 c96:	ee e6       	ldi	r30, 0x6E	; 110
 c98:	f0 e0       	ldi	r31, 0x00	; 0
 c9a:	80 81       	ld	r24, Z
 c9c:	81 60       	ori	r24, 0x01	; 1
 c9e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 ca0:	e1 e8       	ldi	r30, 0x81	; 129
 ca2:	f0 e0       	ldi	r31, 0x00	; 0
 ca4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 ca6:	80 81       	ld	r24, Z
 ca8:	82 60       	ori	r24, 0x02	; 2
 caa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 cac:	80 81       	ld	r24, Z
 cae:	81 60       	ori	r24, 0x01	; 1
 cb0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 cb2:	e0 e8       	ldi	r30, 0x80	; 128
 cb4:	f0 e0       	ldi	r31, 0x00	; 0
 cb6:	80 81       	ld	r24, Z
 cb8:	81 60       	ori	r24, 0x01	; 1
 cba:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 cbc:	e1 eb       	ldi	r30, 0xB1	; 177
 cbe:	f0 e0       	ldi	r31, 0x00	; 0
 cc0:	80 81       	ld	r24, Z
 cc2:	84 60       	ori	r24, 0x04	; 4
 cc4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 cc6:	e0 eb       	ldi	r30, 0xB0	; 176
 cc8:	f0 e0       	ldi	r31, 0x00	; 0
 cca:	80 81       	ld	r24, Z
 ccc:	81 60       	ori	r24, 0x01	; 1
 cce:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 cd0:	ea e7       	ldi	r30, 0x7A	; 122
 cd2:	f0 e0       	ldi	r31, 0x00	; 0
 cd4:	80 81       	ld	r24, Z
 cd6:	84 60       	ori	r24, 0x04	; 4
 cd8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 cda:	80 81       	ld	r24, Z
 cdc:	82 60       	ori	r24, 0x02	; 2
 cde:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 ce0:	80 81       	ld	r24, Z
 ce2:	81 60       	ori	r24, 0x01	; 1
 ce4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 ce6:	80 81       	ld	r24, Z
 ce8:	80 68       	ori	r24, 0x80	; 128
 cea:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 cec:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 cf0:	08 95       	ret

00000cf2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 cf2:	83 30       	cpi	r24, 0x03	; 3
 cf4:	81 f0       	breq	.+32     	; 0xd16 <turnOffPWM+0x24>
 cf6:	28 f4       	brcc	.+10     	; 0xd02 <turnOffPWM+0x10>
 cf8:	81 30       	cpi	r24, 0x01	; 1
 cfa:	99 f0       	breq	.+38     	; 0xd22 <turnOffPWM+0x30>
 cfc:	82 30       	cpi	r24, 0x02	; 2
 cfe:	a1 f0       	breq	.+40     	; 0xd28 <turnOffPWM+0x36>
 d00:	08 95       	ret
 d02:	87 30       	cpi	r24, 0x07	; 7
 d04:	a9 f0       	breq	.+42     	; 0xd30 <turnOffPWM+0x3e>
 d06:	88 30       	cpi	r24, 0x08	; 8
 d08:	b9 f0       	breq	.+46     	; 0xd38 <turnOffPWM+0x46>
 d0a:	84 30       	cpi	r24, 0x04	; 4
 d0c:	d1 f4       	brne	.+52     	; 0xd42 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 d0e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 d12:	8f 7d       	andi	r24, 0xDF	; 223
 d14:	03 c0       	rjmp	.+6      	; 0xd1c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 d16:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 d1a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 d1c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 d20:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 d22:	84 b5       	in	r24, 0x24	; 36
 d24:	8f 77       	andi	r24, 0x7F	; 127
 d26:	02 c0       	rjmp	.+4      	; 0xd2c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 d28:	84 b5       	in	r24, 0x24	; 36
 d2a:	8f 7d       	andi	r24, 0xDF	; 223
 d2c:	84 bd       	out	0x24, r24	; 36
 d2e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 d30:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d34:	8f 77       	andi	r24, 0x7F	; 127
 d36:	03 c0       	rjmp	.+6      	; 0xd3e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 d38:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d3c:	8f 7d       	andi	r24, 0xDF	; 223
 d3e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d42:	08 95       	ret

00000d44 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 d44:	cf 93       	push	r28
 d46:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	fc 01       	movw	r30, r24
 d4c:	e4 58       	subi	r30, 0x84	; 132
 d4e:	ff 4f       	sbci	r31, 0xFF	; 255
 d50:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 d52:	fc 01       	movw	r30, r24
 d54:	e0 57       	subi	r30, 0x70	; 112
 d56:	ff 4f       	sbci	r31, 0xFF	; 255
 d58:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 d5a:	88 23       	and	r24, r24
 d5c:	61 f1       	breq	.+88     	; 0xdb6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	88 0f       	add	r24, r24
 d62:	99 1f       	adc	r25, r25
 d64:	fc 01       	movw	r30, r24
 d66:	e8 54       	subi	r30, 0x48	; 72
 d68:	ff 4f       	sbci	r31, 0xFF	; 255
 d6a:	c5 91       	lpm	r28, Z+
 d6c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 d6e:	fc 01       	movw	r30, r24
 d70:	e2 55       	subi	r30, 0x52	; 82
 d72:	ff 4f       	sbci	r31, 0xFF	; 255
 d74:	a5 91       	lpm	r26, Z+
 d76:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 d78:	61 11       	cpse	r22, r1
 d7a:	09 c0       	rjmp	.+18     	; 0xd8e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 d7c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d7e:	f8 94       	cli
		*reg &= ~bit;
 d80:	88 81       	ld	r24, Y
 d82:	20 95       	com	r18
 d84:	82 23       	and	r24, r18
 d86:	88 83       	st	Y, r24
		*out &= ~bit;
 d88:	ec 91       	ld	r30, X
 d8a:	2e 23       	and	r18, r30
 d8c:	0b c0       	rjmp	.+22     	; 0xda4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 d8e:	62 30       	cpi	r22, 0x02	; 2
 d90:	61 f4       	brne	.+24     	; 0xdaa <pinMode+0x66>
		uint8_t oldSREG = SREG;
 d92:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d94:	f8 94       	cli
		*reg &= ~bit;
 d96:	38 81       	ld	r19, Y
 d98:	82 2f       	mov	r24, r18
 d9a:	80 95       	com	r24
 d9c:	83 23       	and	r24, r19
 d9e:	88 83       	st	Y, r24
		*out |= bit;
 da0:	ec 91       	ld	r30, X
 da2:	2e 2b       	or	r18, r30
 da4:	2c 93       	st	X, r18
		SREG = oldSREG;
 da6:	9f bf       	out	0x3f, r25	; 63
 da8:	06 c0       	rjmp	.+12     	; 0xdb6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 daa:	8f b7       	in	r24, 0x3f	; 63
                cli();
 dac:	f8 94       	cli
		*reg |= bit;
 dae:	e8 81       	ld	r30, Y
 db0:	2e 2b       	or	r18, r30
 db2:	28 83       	st	Y, r18
		SREG = oldSREG;
 db4:	8f bf       	out	0x3f, r24	; 63
	}
}
 db6:	df 91       	pop	r29
 db8:	cf 91       	pop	r28
 dba:	08 95       	ret

00000dbc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 dbc:	1f 93       	push	r17
 dbe:	cf 93       	push	r28
 dc0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 dc2:	28 2f       	mov	r18, r24
 dc4:	30 e0       	ldi	r19, 0x00	; 0
 dc6:	f9 01       	movw	r30, r18
 dc8:	e8 59       	subi	r30, 0x98	; 152
 dca:	ff 4f       	sbci	r31, 0xFF	; 255
 dcc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 dce:	f9 01       	movw	r30, r18
 dd0:	e4 58       	subi	r30, 0x84	; 132
 dd2:	ff 4f       	sbci	r31, 0xFF	; 255
 dd4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 dd6:	f9 01       	movw	r30, r18
 dd8:	e0 57       	subi	r30, 0x70	; 112
 dda:	ff 4f       	sbci	r31, 0xFF	; 255
 ddc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 dde:	cc 23       	and	r28, r28
 de0:	c9 f0       	breq	.+50     	; 0xe14 <digitalWrite+0x58>
 de2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 de4:	81 11       	cpse	r24, r1
 de6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <turnOffPWM>

	out = portOutputRegister(port);
 dea:	ec 2f       	mov	r30, r28
 dec:	f0 e0       	ldi	r31, 0x00	; 0
 dee:	ee 0f       	add	r30, r30
 df0:	ff 1f       	adc	r31, r31
 df2:	e2 55       	subi	r30, 0x52	; 82
 df4:	ff 4f       	sbci	r31, 0xFF	; 255
 df6:	a5 91       	lpm	r26, Z+
 df8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 dfa:	8f b7       	in	r24, 0x3f	; 63
	cli();
 dfc:	f8 94       	cli

	if (val == LOW) {
 dfe:	11 11       	cpse	r17, r1
 e00:	05 c0       	rjmp	.+10     	; 0xe0c <digitalWrite+0x50>
		*out &= ~bit;
 e02:	9c 91       	ld	r25, X
 e04:	ed 2f       	mov	r30, r29
 e06:	e0 95       	com	r30
 e08:	e9 23       	and	r30, r25
 e0a:	02 c0       	rjmp	.+4      	; 0xe10 <digitalWrite+0x54>
	} else {
		*out |= bit;
 e0c:	ec 91       	ld	r30, X
 e0e:	ed 2b       	or	r30, r29
 e10:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 e12:	8f bf       	out	0x3f, r24	; 63
}
 e14:	df 91       	pop	r29
 e16:	cf 91       	pop	r28
 e18:	1f 91       	pop	r17
 e1a:	08 95       	ret

00000e1c <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	fc 01       	movw	r30, r24
 e24:	e4 58       	subi	r30, 0x84	; 132
 e26:	ff 4f       	sbci	r31, 0xFF	; 255
 e28:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
 e2a:	fc 01       	movw	r30, r24
 e2c:	e0 57       	subi	r30, 0x70	; 112
 e2e:	ff 4f       	sbci	r31, 0xFF	; 255
 e30:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
 e32:	66 23       	and	r22, r22
 e34:	11 f0       	breq	.+4      	; 0xe3a <pulseIn+0x1e>
 e36:	67 2f       	mov	r22, r23
 e38:	01 c0       	rjmp	.+2      	; 0xe3c <pulseIn+0x20>
 e3a:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
 e3c:	f0 e0       	ldi	r31, 0x00	; 0
 e3e:	ee 0f       	add	r30, r30
 e40:	ff 1f       	adc	r31, r31
 e42:	ec 55       	subi	r30, 0x5C	; 92
 e44:	ff 4f       	sbci	r31, 0xFF	; 255
 e46:	85 91       	lpm	r24, Z+
 e48:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
	uint8_t stateMask = (state ? bit : 0);

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
 e4a:	89 01       	movw	r16, r18
 e4c:	9a 01       	movw	r18, r20
 e4e:	3f 70       	andi	r19, 0x0F	; 15

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
 e50:	46 2f       	mov	r20, r22
 e52:	67 2f       	mov	r22, r23
 e54:	0e 94 8c 00 	call	0x118	; 0x118 <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
 e58:	61 15       	cp	r22, r1
 e5a:	71 05       	cpc	r23, r1
 e5c:	81 05       	cpc	r24, r1
 e5e:	91 05       	cpc	r25, r1
 e60:	49 f0       	breq	.+18     	; 0xe74 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
 e62:	dc 01       	movw	r26, r24
 e64:	cb 01       	movw	r24, r22
 e66:	01 96       	adiw	r24, 0x01	; 1
 e68:	a1 1d       	adc	r26, r1
 e6a:	b1 1d       	adc	r27, r1
 e6c:	bc 01       	movw	r22, r24
 e6e:	cd 01       	movw	r24, r26
 e70:	9f 70       	andi	r25, 0x0F	; 15
 e72:	03 c0       	rjmp	.+6      	; 0xe7a <pulseIn+0x5e>
	else
		return 0;
 e74:	60 e0       	ldi	r22, 0x00	; 0
 e76:	70 e0       	ldi	r23, 0x00	; 0
 e78:	cb 01       	movw	r24, r22
}
 e7a:	1f 91       	pop	r17
 e7c:	0f 91       	pop	r16
 e7e:	08 95       	ret

00000e80 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 e80:	08 95       	ret

00000e82 <__udivmodsi4>:
 e82:	a1 e2       	ldi	r26, 0x21	; 33
 e84:	1a 2e       	mov	r1, r26
 e86:	aa 1b       	sub	r26, r26
 e88:	bb 1b       	sub	r27, r27
 e8a:	fd 01       	movw	r30, r26
 e8c:	0d c0       	rjmp	.+26     	; 0xea8 <__udivmodsi4_ep>

00000e8e <__udivmodsi4_loop>:
 e8e:	aa 1f       	adc	r26, r26
 e90:	bb 1f       	adc	r27, r27
 e92:	ee 1f       	adc	r30, r30
 e94:	ff 1f       	adc	r31, r31
 e96:	a2 17       	cp	r26, r18
 e98:	b3 07       	cpc	r27, r19
 e9a:	e4 07       	cpc	r30, r20
 e9c:	f5 07       	cpc	r31, r21
 e9e:	20 f0       	brcs	.+8      	; 0xea8 <__udivmodsi4_ep>
 ea0:	a2 1b       	sub	r26, r18
 ea2:	b3 0b       	sbc	r27, r19
 ea4:	e4 0b       	sbc	r30, r20
 ea6:	f5 0b       	sbc	r31, r21

00000ea8 <__udivmodsi4_ep>:
 ea8:	66 1f       	adc	r22, r22
 eaa:	77 1f       	adc	r23, r23
 eac:	88 1f       	adc	r24, r24
 eae:	99 1f       	adc	r25, r25
 eb0:	1a 94       	dec	r1
 eb2:	69 f7       	brne	.-38     	; 0xe8e <__udivmodsi4_loop>
 eb4:	60 95       	com	r22
 eb6:	70 95       	com	r23
 eb8:	80 95       	com	r24
 eba:	90 95       	com	r25
 ebc:	9b 01       	movw	r18, r22
 ebe:	ac 01       	movw	r20, r24
 ec0:	bd 01       	movw	r22, r26
 ec2:	cf 01       	movw	r24, r30
 ec4:	08 95       	ret

00000ec6 <__divmodsi4>:
 ec6:	05 2e       	mov	r0, r21
 ec8:	97 fb       	bst	r25, 7
 eca:	1e f4       	brtc	.+6      	; 0xed2 <__divmodsi4+0xc>
 ecc:	00 94       	com	r0
 ece:	0e 94 7a 07 	call	0xef4	; 0xef4 <__negsi2>
 ed2:	57 fd       	sbrc	r21, 7
 ed4:	07 d0       	rcall	.+14     	; 0xee4 <__divmodsi4_neg2>
 ed6:	0e 94 41 07 	call	0xe82	; 0xe82 <__udivmodsi4>
 eda:	07 fc       	sbrc	r0, 7
 edc:	03 d0       	rcall	.+6      	; 0xee4 <__divmodsi4_neg2>
 ede:	4e f4       	brtc	.+18     	; 0xef2 <__divmodsi4_exit>
 ee0:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__negsi2>

00000ee4 <__divmodsi4_neg2>:
 ee4:	50 95       	com	r21
 ee6:	40 95       	com	r20
 ee8:	30 95       	com	r19
 eea:	21 95       	neg	r18
 eec:	3f 4f       	sbci	r19, 0xFF	; 255
 eee:	4f 4f       	sbci	r20, 0xFF	; 255
 ef0:	5f 4f       	sbci	r21, 0xFF	; 255

00000ef2 <__divmodsi4_exit>:
 ef2:	08 95       	ret

00000ef4 <__negsi2>:
 ef4:	90 95       	com	r25
 ef6:	80 95       	com	r24
 ef8:	70 95       	com	r23
 efa:	61 95       	neg	r22
 efc:	7f 4f       	sbci	r23, 0xFF	; 255
 efe:	8f 4f       	sbci	r24, 0xFF	; 255
 f00:	9f 4f       	sbci	r25, 0xFF	; 255
 f02:	08 95       	ret

00000f04 <__tablejump2__>:
 f04:	ee 0f       	add	r30, r30
 f06:	ff 1f       	adc	r31, r31
 f08:	05 90       	lpm	r0, Z+
 f0a:	f4 91       	lpm	r31, Z
 f0c:	e0 2d       	mov	r30, r0
 f0e:	09 94       	ijmp

00000f10 <_exit>:
 f10:	f8 94       	cli

00000f12 <__stop_program>:
 f12:	ff cf       	rjmp	.-2      	; 0xf12 <__stop_program>
