
sketch_sep06a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f2a  00000fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800116  00800116  00000fd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001048  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d7d  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001483  00000000  00000000  000090dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b90  00000000  00000000  0000a560  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  0000c0f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bb4  00000000  00000000  0000c984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003538  00000000  00000000  0000e538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00011a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_18>
  4c:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	24 05       	cpc	r18, r4

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ea e2       	ldi	r30, 0x2A	; 42
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a6 e1       	ldi	r26, 0x16	; 22
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	ad 3b       	cpi	r26, 0xBD	; 189
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <main>
 110:	0c 94 93 07 	jmp	0xf26	; 0xf26 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
 118:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
 11a:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
 11c:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
 11e:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
 120:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
 122:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
 124:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
 126:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
 128:	05 c0       	rjmp	.+10     	; 0x134 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
 12a:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
 12c:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
 12e:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
 130:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
 132:	61 f1       	breq	.+88     	; 0x18c <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
 134:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
 136:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
 138:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
 13a:	b9 f3       	breq	.-18     	; 0x12a <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
 13c:	05 c0       	rjmp	.+10     	; 0x148 <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
 13e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
 140:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
 142:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
 144:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
 146:	11 f1       	breq	.+68     	; 0x18c <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
 148:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
 14a:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
 14c:	94 13       	cpse	r25, r20
    rjmp .L7   ;
 14e:	f7 cf       	rjmp	.-18     	; 0x13e <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
 150:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
 152:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
 154:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
 156:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
 158:	0a c0       	rjmp	.+20     	; 0x16e <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
 15a:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
 15c:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
 15e:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
 160:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
 162:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
 164:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
 166:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
 168:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
 16a:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
 16c:	79 f0       	breq	.+30     	; 0x18c <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
 16e:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
 170:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
 172:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
 174:	91 f3       	breq	.-28     	; 0x15a <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
 176:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
 178:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
 17a:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
 17c:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
 17e:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
 180:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
 182:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
 184:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
 186:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
 188:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
 18a:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
 18c:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
 18e:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
 190:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
 192:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
 194:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
 196:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
 198:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
 19a:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
 19c:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
 19e:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
 1a0:	08 95       	ret

000001a2 <setup>:
int delay_time = 200 ;  
bool debug = false;              // variable for reading the pin status
// the setup function runs once when you press reset or power the board
void setup() {
	// initialize digital pin 13 as an output.
	pinMode(LED01, OUTPUT);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LED01>
 1a8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <pinMode>
	pinMode(LED02, OUTPUT);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LED02>
 1b2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <pinMode>
	
	 pinMode(trigPin1, OUTPUT);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 ad 06 	call	0xd5a	; 0xd5a <pinMode>
	 pinMode(echoPin1, INPUT);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <pinMode>
	 
	 pinMode(trigPin2, OUTPUT);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 ad 06 	call	0xd5a	; 0xd5a <pinMode>
	 pinMode(echoPin2, INPUT);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 1d6:	26 e0       	ldi	r18, 0x06	; 6
 1d8:	40 e8       	ldi	r20, 0x80	; 128
 1da:	55 e2       	ldi	r21, 0x25	; 37
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	87 e1       	ldi	r24, 0x17	; 23
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_ZN14HardwareSerial5beginEmh>

000001e8 <_Z8isActivei>:
//Serial.print("AT+BT-Remote");
}

// the loop function runs over and over again forever

bool isActive(int sensor){
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
		int trigPin,echoPin ;
		if (sensor == 1){
			trigPin= trigPin1;
			echoPin = echoPin1 ;
		}
		if (sensor == 2){
 1ec:	02 97       	sbiw	r24, 0x02	; 2
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <_Z8isActivei+0xe>
			trigPin= trigPin2;
			echoPin = echoPin2 ;
 1f0:	d7 e0       	ldi	r29, 0x07	; 7
		if (sensor == 1){
			trigPin= trigPin1;
			echoPin = echoPin1 ;
		}
		if (sensor == 2){
			trigPin= trigPin2;
 1f2:	c8 e0       	ldi	r28, 0x08	; 8
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <_Z8isActivei+0x12>
 1f6:	d2 e0       	ldi	r29, 0x02	; 2
 1f8:	c3 e0       	ldi	r28, 0x03	; 3
			echoPin = echoPin2 ;
		}

		long duration, distance ;
		digitalWrite(trigPin, LOW);  // Added this line
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	8c 2f       	mov	r24, r28
 1fe:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalWrite>
		delayMicroseconds(1); // Added this line
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 3e 06 	call	0xc7c	; 0xc7c <delayMicroseconds>
		digitalWrite(trigPin, HIGH);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalWrite>
		//  delayMicroseconds(1000); - Removed this line
		delayMicroseconds(10); // Added this line
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 3e 06 	call	0xc7c	; 0xc7c <delayMicroseconds>
		digitalWrite(trigPin, LOW);;
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8c 2f       	mov	r24, r28
 21e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalWrite>
		duration = pulseIn(echoPin, HIGH);
 222:	20 e4       	ldi	r18, 0x40	; 64
 224:	32 e4       	ldi	r19, 0x42	; 66
 226:	4f e0       	ldi	r20, 0x0F	; 15
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	8d 2f       	mov	r24, r29
 22e:	0e 94 19 07 	call	0xe32	; 0xe32 <pulseIn>
		distance = (duration/2) / 29.1;
 232:	22 e0       	ldi	r18, 0x02	; 2
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodsi4>
 23e:	ca 01       	movw	r24, r20
 240:	b9 01       	movw	r22, r18
 242:	0e 94 0b 03 	call	0x616	; 0x616 <__floatsisf>
 246:	2d ec       	ldi	r18, 0xCD	; 205
 248:	3c ec       	ldi	r19, 0xCC	; 204
 24a:	48 ee       	ldi	r20, 0xE8	; 232
 24c:	51 e4       	ldi	r21, 0x41	; 65
 24e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__divsf3>
 252:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fixsfsi>
		
		if ((distance < 10)) {  // This is where the LED On/Off happens
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	6a 30       	cpi	r22, 0x0A	; 10
 25a:	71 05       	cpc	r23, r1
 25c:	81 05       	cpc	r24, r1
 25e:	91 05       	cpc	r25, r1
 260:	0c f0       	brlt	.+2      	; 0x264 <_Z8isActivei+0x7c>
 262:	20 e0       	ldi	r18, 0x00	; 0
		}
		else {
			return false;
		}
		return false;
}
 264:	82 2f       	mov	r24, r18
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <_Z11sendCommandc>:
void sendCommand(char command){

		Serial.print(command);
 26c:	68 2f       	mov	r22, r24
 26e:	87 e1       	ldi	r24, 0x17	; 23
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <_ZN5Print5printEc>

00000276 <_Z4playv>:
}
void play(){
	sendCommand('d');	
 276:	84 e6       	ldi	r24, 0x64	; 100
 278:	0c 94 36 01 	jmp	0x26c	; 0x26c <_Z11sendCommandc>

0000027c <_Z13previous_songv>:
}
void previous_song(){
	sendCommand('c');
 27c:	83 e6       	ldi	r24, 0x63	; 99
 27e:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(100);
 282:	64 e6       	ldi	r22, 0x64	; 100
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0c 94 02 06 	jmp	0xc04	; 0xc04 <delay>

0000028e <_Z9next_Songv>:
}
void next_Song(){
	sendCommand('e');
 28e:	85 e6       	ldi	r24, 0x65	; 101
 290:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(100);	
 294:	64 e6       	ldi	r22, 0x64	; 100
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0c 94 02 06 	jmp	0xc04	; 0xc04 <delay>

000002a0 <_Z13reduce_volumev>:
} 

void reduce_volume(){
	sendCommand('a');
 2a0:	81 e6       	ldi	r24, 0x61	; 97
 2a2:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(delay_time);
 2a6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2aa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2ae:	07 2e       	mov	r0, r23
 2b0:	00 0c       	add	r0, r0
 2b2:	88 0b       	sbc	r24, r24
 2b4:	99 0b       	sbc	r25, r25
 2b6:	0c 94 02 06 	jmp	0xc04	; 0xc04 <delay>

000002ba <_Z15increase_volumev>:
}
void increase_volume(){
	sendCommand('b');
 2ba:	82 e6       	ldi	r24, 0x62	; 98
 2bc:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
	delay(delay_time);
 2c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2c8:	07 2e       	mov	r0, r23
 2ca:	00 0c       	add	r0, r0
 2cc:	88 0b       	sbc	r24, r24
 2ce:	99 0b       	sbc	r25, r25
 2d0:	0c 94 02 06 	jmp	0xc04	; 0xc04 <delay>

000002d4 <_Z6isPlayii>:
}
bool isPlay(int first,int second){
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8c 01       	movw	r16, r24
 2e2:	7b 01       	movw	r14, r22
	int t = 50 ;
 2e4:	c2 e3       	ldi	r28, 0x32	; 50
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
	while (t > 0) {
		delay(20);
 2e8:	64 e1       	ldi	r22, 0x14	; 20
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 02 06 	call	0xc04	; 0xc04 <delay>
		t = t-1 ;
 2f4:	21 97       	sbiw	r28, 0x01	; 1
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
 2f6:	c8 01       	movw	r24, r16
 2f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 2fc:	81 11       	cpse	r24, r1
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <_Z6isPlayii+0x36>
 300:	c2 30       	cpi	r28, 0x02	; 2
 302:	d1 05       	cpc	r29, r1
 304:	3c f0       	brlt	.+14     	; 0x314 <_Z6isPlayii+0x40>
			return false;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 c0       	rjmp	.+16     	; 0x31a <_Z6isPlayii+0x46>
bool isPlay(int first,int second){
	int t = 50 ;
	while (t > 0) {
		delay(20);
		t = t-1 ;
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
 30a:	c7 01       	movw	r24, r14
 30c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 310:	88 23       	and	r24, r24
 312:	b1 f3       	breq	.-20     	; 0x300 <_Z6isPlayii+0x2c>
	sendCommand('b');
	delay(delay_time);
}
bool isPlay(int first,int second){
	int t = 50 ;
	while (t > 0) {
 314:	20 97       	sbiw	r28, 0x00	; 0
 316:	41 f7       	brne	.-48     	; 0x2e8 <_Z6isPlayii+0x14>
		t = t-1 ;
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
			return false;
		}
	}
	return true ;
 318:	81 e0       	ldi	r24, 0x01	; 1
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	08 95       	ret

00000328 <loop>:
		int first_sensor;
		int second_sensor;
		int t;
		int x;
		int ttl;
		digitalWrite(10, LOW);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalWrite>
		reduce_volume();
 330:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z13reduce_volumev>
		first_sensor = 1;
		second_sensor = 2;
		if (debug){
 334:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 338:	88 23       	and	r24, r24
 33a:	19 f0       	breq	.+6      	; 0x342 <loop+0x1a>
			sendCommand('s');		
 33c:	83 e7       	ldi	r24, 0x73	; 115
 33e:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
		}
		while (1){
			ttl = 150;

			digitalWrite(10, LOW);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalWrite>
		second_sensor = 2;
		if (debug){
			sendCommand('s');		
		}
		while (1){
			ttl = 150;
 34a:	c6 e9       	ldi	r28, 0x96	; 150
 34c:	d0 e0       	ldi	r29, 0x00	; 0
			while (1){
				if (ttl == 0){
					sendCommand('x');
					ttl = 100 ;
				}
				ttl = (ttl -1) ;
 34e:	21 97       	sbiw	r28, 0x01	; 1
				delay(5);
 350:	65 e0       	ldi	r22, 0x05	; 5
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 02 06 	call	0xc04	; 0xc04 <delay>
				if (isActive(1)) {
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 364:	88 23       	and	r24, r24
 366:	49 f0       	breq	.+18     	; 0x37a <loop+0x52>
					digitalWrite(10, HIGH);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalWrite>
					first_sensor = 1;
					second_sensor = 2;           // check if the input is HIGH
 370:	02 e0       	ldi	r16, 0x02	; 2
 372:	10 e0       	ldi	r17, 0x00	; 0
				}
				ttl = (ttl -1) ;
				delay(5);
				if (isActive(1)) {
					digitalWrite(10, HIGH);
					first_sensor = 1;
 374:	c1 e0       	ldi	r28, 0x01	; 1
 376:	d0 e0       	ldi	r29, 0x00	; 0
					second_sensor = 2;           // check if the input is HIGH
					break;
 378:	16 c0       	rjmp	.+44     	; 0x3a6 <loop+0x7e>
				}
				if (isActive(2)) {  
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 382:	81 11       	cpse	r24, r1
 384:	08 c0       	rjmp	.+16     	; 0x396 <loop+0x6e>
		while (1){
			ttl = 150;

			digitalWrite(10, LOW);
			while (1){
				if (ttl == 0){
 386:	20 97       	sbiw	r28, 0x00	; 0
 388:	11 f7       	brne	.-60     	; 0x34e <loop+0x26>
					sendCommand('x');
 38a:	88 e7       	ldi	r24, 0x78	; 120
 38c:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
					ttl = 100 ;
 390:	c4 e6       	ldi	r28, 0x64	; 100
 392:	d0 e0       	ldi	r29, 0x00	; 0
 394:	dc cf       	rjmp	.-72     	; 0x34e <loop+0x26>
					second_sensor = 2;           // check if the input is HIGH
					break;
				}
				if (isActive(2)) {  
					          // check if the input is HIGH
					digitalWrite(10, HIGH);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <digitalWrite>
					first_sensor = 2;
					second_sensor = 1;
 39e:	01 e0       	ldi	r16, 0x01	; 1
 3a0:	10 e0       	ldi	r17, 0x00	; 0
					break;
				}
				if (isActive(2)) {  
					          // check if the input is HIGH
					digitalWrite(10, HIGH);
					first_sensor = 2;
 3a2:	c2 e0       	ldi	r28, 0x02	; 2
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	c8 2e       	mov	r12, r24
 3aa:	d1 2c       	mov	r13, r1
					break;
				}
				
			}
			t = 5 ;
			x = 10 ;
 3ac:	9a e0       	ldi	r25, 0x0A	; 10
 3ae:	e9 2e       	mov	r14, r25
 3b0:	f1 2c       	mov	r15, r1
			break_flag = false;
			//digitalWrite(10, HIGH);
			while (t > 0){
				delay(5);
 3b2:	65 e0       	ldi	r22, 0x05	; 5
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 02 06 	call	0xc04	; 0xc04 <delay>
				while (x > 0) {
 3be:	e1 14       	cp	r14, r1
 3c0:	f1 04       	cpc	r15, r1
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <loop+0x9e>
 3c4:	5d c0       	rjmp	.+186    	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
					if (isActive(second_sensor)) {
 3c6:	c8 01       	movw	r24, r16
 3c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 3cc:	88 23       	and	r24, r24
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <loop+0xaa>
 3d0:	3f c0       	rjmp	.+126    	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
						if (second_sensor == 1){
 3d2:	01 30       	cpi	r16, 0x01	; 1
 3d4:	11 05       	cpc	r17, r1
 3d6:	f1 f4       	brne	.+60     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
							
							if (isPlay(first_sensor,second_sensor)) {
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	ce 01       	movw	r24, r28
 3de:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z6isPlayii>
 3e2:	88 23       	and	r24, r24
 3e4:	a1 f0       	breq	.+40     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
								play();
 3e6:	0e 94 3b 01 	call	0x276	; 0x276 <_Z4playv>
								while (isActive(first_sensor) && isActive(second_sensor)) {
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 3f0:	88 23       	and	r24, r24
 3f2:	c1 f1       	breq	.+112    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 3fc:	88 23       	and	r24, r24
 3fe:	91 f1       	breq	.+100    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
									delay(15);
 400:	6f e0       	ldi	r22, 0x0F	; 15
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 02 06 	call	0xc04	; 0xc04 <delay>
 40c:	ee cf       	rjmp	.-36     	; 0x3ea <loop+0xc2>
								break_flag = true;
								break;	
							}
							
							// previous Song
							previous_song();
 40e:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z13previous_songv>
							break_flag = true;
							break;
 412:	28 c0       	rjmp	.+80     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
						}
						if (second_sensor == 2){
							
							if (isPlay(first_sensor,second_sensor)) {
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	ce 01       	movw	r24, r28
 41a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z6isPlayii>
 41e:	88 23       	and	r24, r24
 420:	a1 f0       	breq	.+40     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
								play();
 422:	0e 94 3b 01 	call	0x276	; 0x276 <_Z4playv>
								while (isActive(first_sensor) && isActive(second_sensor)) {
 426:	ce 01       	movw	r24, r28
 428:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 42c:	88 23       	and	r24, r24
 42e:	d1 f0       	breq	.+52     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 438:	88 23       	and	r24, r24
 43a:	a1 f0       	breq	.+40     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
									delay(15);
 43c:	6f e0       	ldi	r22, 0x0F	; 15
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 02 06 	call	0xc04	; 0xc04 <delay>
 448:	ee cf       	rjmp	.-36     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
								break_flag = true;
								break;
							}
							
							// Next Song
							next_Song();
 44a:	0e 94 47 01 	call	0x28e	; 0x28e <_Z9next_Songv>
							break_flag = true;
							break;
 44e:	0a c0       	rjmp	.+20     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
						}
					}
				delay(5);
 450:	65 e0       	ldi	r22, 0x05	; 5
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 02 06 	call	0xc04	; 0xc04 <delay>
				x = x-1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	e8 1a       	sub	r14, r24
 460:	f1 08       	sbc	r15, r1
 462:	ad cf       	rjmp	.-166    	; 0x3be <loop+0x96>
			}
			if (break_flag){
				if (debug){
 464:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 468:	88 23       	and	r24, r24
 46a:	19 f0       	breq	.+6      	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
					sendCommand('2');;
 46c:	82 e3       	ldi	r24, 0x32	; 50
 46e:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11sendCommandc>
				}
				delay(100);
 472:	64 e6       	ldi	r22, 0x64	; 100
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 02 06 	call	0xc04	; 0xc04 <delay>
				break;
 47e:	61 cf       	rjmp	.-318    	; 0x342 <loop+0x1a>
			sendCommand('3');
			delay(100);
			break;
		}
		*/
		if (isActive(first_sensor)){
 480:	ce 01       	movw	r24, r28
 482:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 486:	88 23       	and	r24, r24
 488:	b1 f0       	breq	.+44     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
			if (first_sensor == 1){
 48a:	21 97       	sbiw	r28, 0x01	; 1
 48c:	51 f4       	brne	.+20     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
				while (isActive(first_sensor)) {
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 496:	88 23       	and	r24, r24
 498:	09 f4       	brne	.+2      	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
 49a:	53 cf       	rjmp	.-346    	; 0x342 <loop+0x1a>
					reduce_volume();			
 49c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z13reduce_volumev>
 4a0:	f6 cf       	rjmp	.-20     	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
				}
				break;
				
			}
			if (first_sensor == 2){
				while (isActive(first_sensor)){		
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z8isActivei>
 4aa:	88 23       	and	r24, r24
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
 4ae:	49 cf       	rjmp	.-366    	; 0x342 <loop+0x1a>
					increase_volume();			
 4b0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z15increase_volumev>
 4b4:	f6 cf       	rjmp	.-20     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	c8 1a       	sub	r12, r24
 4ba:	d1 08       	sbc	r13, r1
			}
			t = 5 ;
			x = 10 ;
			break_flag = false;
			//digitalWrite(10, HIGH);
			while (t > 0){
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
 4be:	79 cf       	rjmp	.-270    	; 0x3b2 <loop+0x8a>
 4c0:	40 cf       	rjmp	.-384    	; 0x342 <loop+0x1a>

000004c2 <__divsf3>:
 4c2:	0e 94 75 02 	call	0x4ea	; 0x4ea <__divsf3x>
 4c6:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_round>
 4ca:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscB>
 4ce:	58 f0       	brcs	.+22     	; 0x4e6 <__divsf3+0x24>
 4d0:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_pscA>
 4d4:	40 f0       	brcs	.+16     	; 0x4e6 <__divsf3+0x24>
 4d6:	29 f4       	brne	.+10     	; 0x4e2 <__divsf3+0x20>
 4d8:	5f 3f       	cpi	r21, 0xFF	; 255
 4da:	29 f0       	breq	.+10     	; 0x4e6 <__divsf3+0x24>
 4dc:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_inf>
 4e0:	51 11       	cpse	r21, r1
 4e2:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>
 4e6:	0c 94 4c 03 	jmp	0x698	; 0x698 <__fp_nan>

000004ea <__divsf3x>:
 4ea:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_split3>
 4ee:	68 f3       	brcs	.-38     	; 0x4ca <__divsf3+0x8>

000004f0 <__divsf3_pse>:
 4f0:	99 23       	and	r25, r25
 4f2:	b1 f3       	breq	.-20     	; 0x4e0 <__divsf3+0x1e>
 4f4:	55 23       	and	r21, r21
 4f6:	91 f3       	breq	.-28     	; 0x4dc <__divsf3+0x1a>
 4f8:	95 1b       	sub	r25, r21
 4fa:	55 0b       	sbc	r21, r21
 4fc:	bb 27       	eor	r27, r27
 4fe:	aa 27       	eor	r26, r26
 500:	62 17       	cp	r22, r18
 502:	73 07       	cpc	r23, r19
 504:	84 07       	cpc	r24, r20
 506:	38 f0       	brcs	.+14     	; 0x516 <__divsf3_pse+0x26>
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	5f 4f       	sbci	r21, 0xFF	; 255
 50c:	22 0f       	add	r18, r18
 50e:	33 1f       	adc	r19, r19
 510:	44 1f       	adc	r20, r20
 512:	aa 1f       	adc	r26, r26
 514:	a9 f3       	breq	.-22     	; 0x500 <__divsf3_pse+0x10>
 516:	35 d0       	rcall	.+106    	; 0x582 <__divsf3_pse+0x92>
 518:	0e 2e       	mov	r0, r30
 51a:	3a f0       	brmi	.+14     	; 0x52a <__divsf3_pse+0x3a>
 51c:	e0 e8       	ldi	r30, 0x80	; 128
 51e:	32 d0       	rcall	.+100    	; 0x584 <__divsf3_pse+0x94>
 520:	91 50       	subi	r25, 0x01	; 1
 522:	50 40       	sbci	r21, 0x00	; 0
 524:	e6 95       	lsr	r30
 526:	00 1c       	adc	r0, r0
 528:	ca f7       	brpl	.-14     	; 0x51c <__divsf3_pse+0x2c>
 52a:	2b d0       	rcall	.+86     	; 0x582 <__divsf3_pse+0x92>
 52c:	fe 2f       	mov	r31, r30
 52e:	29 d0       	rcall	.+82     	; 0x582 <__divsf3_pse+0x92>
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	bb 1f       	adc	r27, r27
 538:	26 17       	cp	r18, r22
 53a:	37 07       	cpc	r19, r23
 53c:	48 07       	cpc	r20, r24
 53e:	ab 07       	cpc	r26, r27
 540:	b0 e8       	ldi	r27, 0x80	; 128
 542:	09 f0       	breq	.+2      	; 0x546 <__divsf3_pse+0x56>
 544:	bb 0b       	sbc	r27, r27
 546:	80 2d       	mov	r24, r0
 548:	bf 01       	movw	r22, r30
 54a:	ff 27       	eor	r31, r31
 54c:	93 58       	subi	r25, 0x83	; 131
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
 550:	3a f0       	brmi	.+14     	; 0x560 <__divsf3_pse+0x70>
 552:	9e 3f       	cpi	r25, 0xFE	; 254
 554:	51 05       	cpc	r21, r1
 556:	78 f0       	brcs	.+30     	; 0x576 <__divsf3_pse+0x86>
 558:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_inf>
 55c:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>
 560:	5f 3f       	cpi	r21, 0xFF	; 255
 562:	e4 f3       	brlt	.-8      	; 0x55c <__divsf3_pse+0x6c>
 564:	98 3e       	cpi	r25, 0xE8	; 232
 566:	d4 f3       	brlt	.-12     	; 0x55c <__divsf3_pse+0x6c>
 568:	86 95       	lsr	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b7 95       	ror	r27
 570:	f7 95       	ror	r31
 572:	9f 5f       	subi	r25, 0xFF	; 255
 574:	c9 f7       	brne	.-14     	; 0x568 <__divsf3_pse+0x78>
 576:	88 0f       	add	r24, r24
 578:	91 1d       	adc	r25, r1
 57a:	96 95       	lsr	r25
 57c:	87 95       	ror	r24
 57e:	97 f9       	bld	r25, 7
 580:	08 95       	ret
 582:	e1 e0       	ldi	r30, 0x01	; 1
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	bb 1f       	adc	r27, r27
 58c:	62 17       	cp	r22, r18
 58e:	73 07       	cpc	r23, r19
 590:	84 07       	cpc	r24, r20
 592:	ba 07       	cpc	r27, r26
 594:	20 f0       	brcs	.+8      	; 0x59e <__divsf3_pse+0xae>
 596:	62 1b       	sub	r22, r18
 598:	73 0b       	sbc	r23, r19
 59a:	84 0b       	sbc	r24, r20
 59c:	ba 0b       	sbc	r27, r26
 59e:	ee 1f       	adc	r30, r30
 5a0:	88 f7       	brcc	.-30     	; 0x584 <__divsf3_pse+0x94>
 5a2:	e0 95       	com	r30
 5a4:	08 95       	ret

000005a6 <__fixsfsi>:
 5a6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fixunssfsi>
 5aa:	68 94       	set
 5ac:	b1 11       	cpse	r27, r1
 5ae:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>
 5b2:	08 95       	ret

000005b4 <__fixunssfsi>:
 5b4:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fp_splitA>
 5b8:	88 f0       	brcs	.+34     	; 0x5dc <__fixunssfsi+0x28>
 5ba:	9f 57       	subi	r25, 0x7F	; 127
 5bc:	98 f0       	brcs	.+38     	; 0x5e4 <__fixunssfsi+0x30>
 5be:	b9 2f       	mov	r27, r25
 5c0:	99 27       	eor	r25, r25
 5c2:	b7 51       	subi	r27, 0x17	; 23
 5c4:	b0 f0       	brcs	.+44     	; 0x5f2 <__fixunssfsi+0x3e>
 5c6:	e1 f0       	breq	.+56     	; 0x600 <__fixunssfsi+0x4c>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	1a f0       	brmi	.+6      	; 0x5d8 <__fixunssfsi+0x24>
 5d2:	ba 95       	dec	r27
 5d4:	c9 f7       	brne	.-14     	; 0x5c8 <__fixunssfsi+0x14>
 5d6:	14 c0       	rjmp	.+40     	; 0x600 <__fixunssfsi+0x4c>
 5d8:	b1 30       	cpi	r27, 0x01	; 1
 5da:	91 f0       	breq	.+36     	; 0x600 <__fixunssfsi+0x4c>
 5dc:	0e 94 90 03 	call	0x720	; 0x720 <__fp_zero>
 5e0:	b1 e0       	ldi	r27, 0x01	; 1
 5e2:	08 95       	ret
 5e4:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_zero>
 5e8:	67 2f       	mov	r22, r23
 5ea:	78 2f       	mov	r23, r24
 5ec:	88 27       	eor	r24, r24
 5ee:	b8 5f       	subi	r27, 0xF8	; 248
 5f0:	39 f0       	breq	.+14     	; 0x600 <__fixunssfsi+0x4c>
 5f2:	b9 3f       	cpi	r27, 0xF9	; 249
 5f4:	cc f3       	brlt	.-14     	; 0x5e8 <__fixunssfsi+0x34>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b3 95       	inc	r27
 5fe:	d9 f7       	brne	.-10     	; 0x5f6 <__fixunssfsi+0x42>
 600:	3e f4       	brtc	.+14     	; 0x610 <__fixunssfsi+0x5c>
 602:	90 95       	com	r25
 604:	80 95       	com	r24
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	08 95       	ret

00000612 <__floatunsisf>:
 612:	e8 94       	clt
 614:	09 c0       	rjmp	.+18     	; 0x628 <__floatsisf+0x12>

00000616 <__floatsisf>:
 616:	97 fb       	bst	r25, 7
 618:	3e f4       	brtc	.+14     	; 0x628 <__floatsisf+0x12>
 61a:	90 95       	com	r25
 61c:	80 95       	com	r24
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	99 23       	and	r25, r25
 62a:	a9 f0       	breq	.+42     	; 0x656 <__floatsisf+0x40>
 62c:	f9 2f       	mov	r31, r25
 62e:	96 e9       	ldi	r25, 0x96	; 150
 630:	bb 27       	eor	r27, r27
 632:	93 95       	inc	r25
 634:	f6 95       	lsr	r31
 636:	87 95       	ror	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f1 11       	cpse	r31, r1
 640:	f8 cf       	rjmp	.-16     	; 0x632 <__floatsisf+0x1c>
 642:	fa f4       	brpl	.+62     	; 0x682 <__floatsisf+0x6c>
 644:	bb 0f       	add	r27, r27
 646:	11 f4       	brne	.+4      	; 0x64c <__floatsisf+0x36>
 648:	60 ff       	sbrs	r22, 0
 64a:	1b c0       	rjmp	.+54     	; 0x682 <__floatsisf+0x6c>
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	16 c0       	rjmp	.+44     	; 0x682 <__floatsisf+0x6c>
 656:	88 23       	and	r24, r24
 658:	11 f0       	breq	.+4      	; 0x65e <__floatsisf+0x48>
 65a:	96 e9       	ldi	r25, 0x96	; 150
 65c:	11 c0       	rjmp	.+34     	; 0x680 <__floatsisf+0x6a>
 65e:	77 23       	and	r23, r23
 660:	21 f0       	breq	.+8      	; 0x66a <__floatsisf+0x54>
 662:	9e e8       	ldi	r25, 0x8E	; 142
 664:	87 2f       	mov	r24, r23
 666:	76 2f       	mov	r23, r22
 668:	05 c0       	rjmp	.+10     	; 0x674 <__floatsisf+0x5e>
 66a:	66 23       	and	r22, r22
 66c:	71 f0       	breq	.+28     	; 0x68a <__floatsisf+0x74>
 66e:	96 e8       	ldi	r25, 0x86	; 134
 670:	86 2f       	mov	r24, r22
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	2a f0       	brmi	.+10     	; 0x682 <__floatsisf+0x6c>
 678:	9a 95       	dec	r25
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	da f7       	brpl	.-10     	; 0x678 <__floatsisf+0x62>
 682:	88 0f       	add	r24, r24
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__fp_inf>:
 68c:	97 f9       	bld	r25, 7
 68e:	9f 67       	ori	r25, 0x7F	; 127
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	08 95       	ret

00000698 <__fp_nan>:
 698:	9f ef       	ldi	r25, 0xFF	; 255
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	08 95       	ret

0000069e <__fp_pscA>:
 69e:	00 24       	eor	r0, r0
 6a0:	0a 94       	dec	r0
 6a2:	16 16       	cp	r1, r22
 6a4:	17 06       	cpc	r1, r23
 6a6:	18 06       	cpc	r1, r24
 6a8:	09 06       	cpc	r0, r25
 6aa:	08 95       	ret

000006ac <__fp_pscB>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	12 16       	cp	r1, r18
 6b2:	13 06       	cpc	r1, r19
 6b4:	14 06       	cpc	r1, r20
 6b6:	05 06       	cpc	r0, r21
 6b8:	08 95       	ret

000006ba <__fp_round>:
 6ba:	09 2e       	mov	r0, r25
 6bc:	03 94       	inc	r0
 6be:	00 0c       	add	r0, r0
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__fp_round+0xc>
 6c2:	88 23       	and	r24, r24
 6c4:	52 f0       	brmi	.+20     	; 0x6da <__fp_round+0x20>
 6c6:	bb 0f       	add	r27, r27
 6c8:	40 f4       	brcc	.+16     	; 0x6da <__fp_round+0x20>
 6ca:	bf 2b       	or	r27, r31
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <__fp_round+0x18>
 6ce:	60 ff       	sbrs	r22, 0
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <__fp_round+0x20>
 6d2:	6f 5f       	subi	r22, 0xFF	; 255
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__fp_split3>:
 6dc:	57 fd       	sbrc	r21, 7
 6de:	90 58       	subi	r25, 0x80	; 128
 6e0:	44 0f       	add	r20, r20
 6e2:	55 1f       	adc	r21, r21
 6e4:	59 f0       	breq	.+22     	; 0x6fc <__fp_splitA+0x10>
 6e6:	5f 3f       	cpi	r21, 0xFF	; 255
 6e8:	71 f0       	breq	.+28     	; 0x706 <__fp_splitA+0x1a>
 6ea:	47 95       	ror	r20

000006ec <__fp_splitA>:
 6ec:	88 0f       	add	r24, r24
 6ee:	97 fb       	bst	r25, 7
 6f0:	99 1f       	adc	r25, r25
 6f2:	61 f0       	breq	.+24     	; 0x70c <__fp_splitA+0x20>
 6f4:	9f 3f       	cpi	r25, 0xFF	; 255
 6f6:	79 f0       	breq	.+30     	; 0x716 <__fp_splitA+0x2a>
 6f8:	87 95       	ror	r24
 6fa:	08 95       	ret
 6fc:	12 16       	cp	r1, r18
 6fe:	13 06       	cpc	r1, r19
 700:	14 06       	cpc	r1, r20
 702:	55 1f       	adc	r21, r21
 704:	f2 cf       	rjmp	.-28     	; 0x6ea <__fp_split3+0xe>
 706:	46 95       	lsr	r20
 708:	f1 df       	rcall	.-30     	; 0x6ec <__fp_splitA>
 70a:	08 c0       	rjmp	.+16     	; 0x71c <__fp_splitA+0x30>
 70c:	16 16       	cp	r1, r22
 70e:	17 06       	cpc	r1, r23
 710:	18 06       	cpc	r1, r24
 712:	99 1f       	adc	r25, r25
 714:	f1 cf       	rjmp	.-30     	; 0x6f8 <__fp_splitA+0xc>
 716:	86 95       	lsr	r24
 718:	71 05       	cpc	r23, r1
 71a:	61 05       	cpc	r22, r1
 71c:	08 94       	sec
 71e:	08 95       	ret

00000720 <__fp_zero>:
 720:	e8 94       	clt

00000722 <__fp_szero>:
 722:	bb 27       	eor	r27, r27
 724:	66 27       	eor	r22, r22
 726:	77 27       	eor	r23, r23
 728:	cb 01       	movw	r24, r22
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret

0000072e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 72e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 730:	91 8d       	ldd	r25, Z+25	; 0x19
 732:	22 8d       	ldd	r18, Z+26	; 0x1a
 734:	89 2f       	mov	r24, r25
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	80 5c       	subi	r24, 0xC0	; 192
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	82 1b       	sub	r24, r18
 73e:	91 09       	sbc	r25, r1
}
 740:	8f 73       	andi	r24, 0x3F	; 63
 742:	99 27       	eor	r25, r25
 744:	08 95       	ret

00000746 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 746:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 748:	91 8d       	ldd	r25, Z+25	; 0x19
 74a:	82 8d       	ldd	r24, Z+26	; 0x1a
 74c:	98 17       	cp	r25, r24
 74e:	31 f0       	breq	.+12     	; 0x75c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 750:	82 8d       	ldd	r24, Z+26	; 0x1a
 752:	e8 0f       	add	r30, r24
 754:	f1 1d       	adc	r31, r1
 756:	85 8d       	ldd	r24, Z+29	; 0x1d
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 75c:	8f ef       	ldi	r24, 0xFF	; 255
 75e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 760:	08 95       	ret

00000762 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 762:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 764:	91 8d       	ldd	r25, Z+25	; 0x19
 766:	82 8d       	ldd	r24, Z+26	; 0x1a
 768:	98 17       	cp	r25, r24
 76a:	61 f0       	breq	.+24     	; 0x784 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 76c:	82 8d       	ldd	r24, Z+26	; 0x1a
 76e:	df 01       	movw	r26, r30
 770:	a8 0f       	add	r26, r24
 772:	b1 1d       	adc	r27, r1
 774:	5d 96       	adiw	r26, 0x1d	; 29
 776:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 778:	92 8d       	ldd	r25, Z+26	; 0x1a
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	9f 73       	andi	r25, 0x3F	; 63
 77e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 788:	08 95       	ret

0000078a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 78a:	8a e1       	ldi	r24, 0x1A	; 26
 78c:	95 e0       	ldi	r25, 0x05	; 5
 78e:	89 2b       	or	r24, r25
 790:	49 f0       	breq	.+18     	; 0x7a4 <_Z14serialEventRunv+0x1a>
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	89 2b       	or	r24, r25
 798:	29 f0       	breq	.+10     	; 0x7a4 <_Z14serialEventRunv+0x1a>
 79a:	0e 94 1a 05 	call	0xa34	; 0xa34 <_Z17Serial0_availablev>
 79e:	81 11       	cpse	r24, r1
 7a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 7a4:	08 95       	ret

000007a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 7a6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 7a8:	84 8d       	ldd	r24, Z+28	; 0x1c
 7aa:	df 01       	movw	r26, r30
 7ac:	a8 0f       	add	r26, r24
 7ae:	b1 1d       	adc	r27, r1
 7b0:	a3 5a       	subi	r26, 0xA3	; 163
 7b2:	bf 4f       	sbci	r27, 0xFF	; 255
 7b4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 7b6:	84 8d       	ldd	r24, Z+28	; 0x1c
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	8f 73       	andi	r24, 0x3F	; 63
 7be:	99 27       	eor	r25, r25
 7c0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 7c2:	a6 89       	ldd	r26, Z+22	; 0x16
 7c4:	b7 89       	ldd	r27, Z+23	; 0x17
 7c6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 7c8:	a0 89       	ldd	r26, Z+16	; 0x10
 7ca:	b1 89       	ldd	r27, Z+17	; 0x11
 7cc:	8c 91       	ld	r24, X
 7ce:	80 64       	ori	r24, 0x40	; 64
 7d0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 7d2:	93 8d       	ldd	r25, Z+27	; 0x1b
 7d4:	84 8d       	ldd	r24, Z+28	; 0x1c
 7d6:	98 13       	cpse	r25, r24
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 7da:	02 88       	ldd	r0, Z+18	; 0x12
 7dc:	f3 89       	ldd	r31, Z+19	; 0x13
 7de:	e0 2d       	mov	r30, r0
 7e0:	80 81       	ld	r24, Z
 7e2:	8f 7d       	andi	r24, 0xDF	; 223
 7e4:	80 83       	st	Z, r24
 7e6:	08 95       	ret

000007e8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 7ee:	88 8d       	ldd	r24, Y+24	; 0x18
 7f0:	88 23       	and	r24, r24
 7f2:	c9 f0       	breq	.+50     	; 0x826 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 7f4:	ea 89       	ldd	r30, Y+18	; 0x12
 7f6:	fb 89       	ldd	r31, Y+19	; 0x13
 7f8:	80 81       	ld	r24, Z
 7fa:	85 fd       	sbrc	r24, 5
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <_ZN14HardwareSerial5flushEv+0x20>
 7fe:	a8 89       	ldd	r26, Y+16	; 0x10
 800:	b9 89       	ldd	r27, Y+17	; 0x11
 802:	8c 91       	ld	r24, X
 804:	86 fd       	sbrc	r24, 6
 806:	0f c0       	rjmp	.+30     	; 0x826 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	07 fc       	sbrc	r0, 7
 80c:	f5 cf       	rjmp	.-22     	; 0x7f8 <_ZN14HardwareSerial5flushEv+0x10>
 80e:	80 81       	ld	r24, Z
 810:	85 ff       	sbrs	r24, 5
 812:	f2 cf       	rjmp	.-28     	; 0x7f8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 814:	a8 89       	ldd	r26, Y+16	; 0x10
 816:	b9 89       	ldd	r27, Y+17	; 0x11
 818:	8c 91       	ld	r24, X
 81a:	85 ff       	sbrs	r24, 5
 81c:	ed cf       	rjmp	.-38     	; 0x7f8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 81e:	ce 01       	movw	r24, r28
 820:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 824:	e7 cf       	rjmp	.-50     	; 0x7f4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	08 95       	ret

0000082c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 82c:	ef 92       	push	r14
 82e:	ff 92       	push	r15
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	ec 01       	movw	r28, r24
  _written = true;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 83e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 840:	8c 8d       	ldd	r24, Y+28	; 0x1c
 842:	98 13       	cpse	r25, r24
 844:	05 c0       	rjmp	.+10     	; 0x850 <_ZN14HardwareSerial5writeEh+0x24>
 846:	e8 89       	ldd	r30, Y+16	; 0x10
 848:	f9 89       	ldd	r31, Y+17	; 0x11
 84a:	80 81       	ld	r24, Z
 84c:	85 fd       	sbrc	r24, 5
 84e:	24 c0       	rjmp	.+72     	; 0x898 <_ZN14HardwareSerial5writeEh+0x6c>
 850:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 852:	0b 8d       	ldd	r16, Y+27	; 0x1b
 854:	10 e0       	ldi	r17, 0x00	; 0
 856:	0f 5f       	subi	r16, 0xFF	; 255
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	0f 73       	andi	r16, 0x3F	; 63
 85c:	11 27       	eor	r17, r17
 85e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 860:	8c 8d       	ldd	r24, Y+28	; 0x1c
 862:	e8 12       	cpse	r14, r24
 864:	0c c0       	rjmp	.+24     	; 0x87e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	07 fc       	sbrc	r0, 7
 86a:	fa cf       	rjmp	.-12     	; 0x860 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 86c:	e8 89       	ldd	r30, Y+16	; 0x10
 86e:	f9 89       	ldd	r31, Y+17	; 0x11
 870:	80 81       	ld	r24, Z
 872:	85 ff       	sbrs	r24, 5
 874:	f5 cf       	rjmp	.-22     	; 0x860 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 876:	ce 01       	movw	r24, r28
 878:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 87c:	f1 cf       	rjmp	.-30     	; 0x860 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 87e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 880:	fe 01       	movw	r30, r28
 882:	e8 0f       	add	r30, r24
 884:	f1 1d       	adc	r31, r1
 886:	e3 5a       	subi	r30, 0xA3	; 163
 888:	ff 4f       	sbci	r31, 0xFF	; 255
 88a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 88c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 88e:	ea 89       	ldd	r30, Y+18	; 0x12
 890:	fb 89       	ldd	r31, Y+19	; 0x13
 892:	80 81       	ld	r24, Z
 894:	80 62       	ori	r24, 0x20	; 32
 896:	07 c0       	rjmp	.+14     	; 0x8a6 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 898:	ee 89       	ldd	r30, Y+22	; 0x16
 89a:	ff 89       	ldd	r31, Y+23	; 0x17
 89c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 89e:	e8 89       	ldd	r30, Y+16	; 0x10
 8a0:	f9 89       	ldd	r31, Y+17	; 0x11
 8a2:	80 81       	ld	r24, Z
 8a4:	80 64       	ori	r24, 0x40	; 64
 8a6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	1f 91       	pop	r17
 8b2:	0f 91       	pop	r16
 8b4:	ff 90       	pop	r15
 8b6:	ef 90       	pop	r14
 8b8:	08 95       	ret

000008ba <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 8ba:	cf 92       	push	r12
 8bc:	df 92       	push	r13
 8be:	ef 92       	push	r14
 8c0:	ff 92       	push	r15
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	ec 01       	movw	r28, r24
 8ca:	6a 01       	movw	r12, r20
 8cc:	7b 01       	movw	r14, r22
 8ce:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 8d0:	e8 89       	ldd	r30, Y+16	; 0x10
 8d2:	f9 89       	ldd	r31, Y+17	; 0x11
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 8d8:	41 15       	cp	r20, r1
 8da:	51 4e       	sbci	r21, 0xE1	; 225
 8dc:	61 05       	cpc	r22, r1
 8de:	71 05       	cpc	r23, r1
 8e0:	b1 f0       	breq	.+44     	; 0x90e <__stack+0xf>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	79 e0       	ldi	r23, 0x09	; 9
 8e6:	8d e3       	ldi	r24, 0x3D	; 61
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	a7 01       	movw	r20, r14
 8ec:	96 01       	movw	r18, r12
 8ee:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodsi4>
 8f2:	da 01       	movw	r26, r20
 8f4:	c9 01       	movw	r24, r18
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	a1 09       	sbc	r26, r1
 8fa:	b1 09       	sbc	r27, r1
 8fc:	b6 95       	lsr	r27
 8fe:	a7 95       	ror	r26
 900:	97 95       	ror	r25
 902:	87 95       	ror	r24
 904:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 906:	41 15       	cp	r20, r1
 908:	80 e1       	ldi	r24, 0x10	; 16
 90a:	58 07       	cpc	r21, r24
 90c:	a8 f0       	brcs	.+42     	; 0x938 <__stack+0x39>
  {
    *_ucsra = 0;
 90e:	e8 89       	ldd	r30, Y+16	; 0x10
 910:	f9 89       	ldd	r31, Y+17	; 0x11
 912:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 914:	60 e8       	ldi	r22, 0x80	; 128
 916:	74 e8       	ldi	r23, 0x84	; 132
 918:	8e e1       	ldi	r24, 0x1E	; 30
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	a7 01       	movw	r20, r14
 91e:	96 01       	movw	r18, r12
 920:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodsi4>
 924:	ba 01       	movw	r22, r20
 926:	a9 01       	movw	r20, r18
 928:	41 50       	subi	r20, 0x01	; 1
 92a:	51 09       	sbc	r21, r1
 92c:	61 09       	sbc	r22, r1
 92e:	71 09       	sbc	r23, r1
 930:	76 95       	lsr	r23
 932:	67 95       	ror	r22
 934:	57 95       	ror	r21
 936:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 938:	ec 85       	ldd	r30, Y+12	; 0x0c
 93a:	fd 85       	ldd	r31, Y+13	; 0x0d
 93c:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 93e:	ee 85       	ldd	r30, Y+14	; 0x0e
 940:	ff 85       	ldd	r31, Y+15	; 0x0f
 942:	40 83       	st	Z, r20

  _written = false;
 944:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 946:	ec 89       	ldd	r30, Y+20	; 0x14
 948:	fd 89       	ldd	r31, Y+21	; 0x15
 94a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 94c:	ea 89       	ldd	r30, Y+18	; 0x12
 94e:	fb 89       	ldd	r31, Y+19	; 0x13
 950:	80 81       	ld	r24, Z
 952:	80 61       	ori	r24, 0x10	; 16
 954:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 956:	ea 89       	ldd	r30, Y+18	; 0x12
 958:	fb 89       	ldd	r31, Y+19	; 0x13
 95a:	80 81       	ld	r24, Z
 95c:	88 60       	ori	r24, 0x08	; 8
 95e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 960:	ea 89       	ldd	r30, Y+18	; 0x12
 962:	fb 89       	ldd	r31, Y+19	; 0x13
 964:	80 81       	ld	r24, Z
 966:	80 68       	ori	r24, 0x80	; 128
 968:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 96a:	ea 89       	ldd	r30, Y+18	; 0x12
 96c:	fb 89       	ldd	r31, Y+19	; 0x13
 96e:	80 81       	ld	r24, Z
 970:	8f 7d       	andi	r24, 0xDF	; 223
 972:	80 83       	st	Z, r24
}
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	1f 91       	pop	r17
 97a:	ff 90       	pop	r15
 97c:	ef 90       	pop	r14
 97e:	df 90       	pop	r13
 980:	cf 90       	pop	r12
 982:	08 95       	ret

00000984 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 984:	1f 92       	push	r1
 986:	0f 92       	push	r0
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	0f 92       	push	r0
 98c:	11 24       	eor	r1, r1
 98e:	2f 93       	push	r18
 990:	8f 93       	push	r24
 992:	9f 93       	push	r25
 994:	ef 93       	push	r30
 996:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 998:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <Serial+0x10>
 99c:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <Serial+0x11>
 9a0:	80 81       	ld	r24, Z
 9a2:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <Serial+0x16>
 9a6:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <Serial+0x17>
 9aa:	82 fd       	sbrc	r24, 2
 9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 9ae:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 9b0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Serial+0x19>
 9b4:	8f 5f       	subi	r24, 0xFF	; 255
 9b6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 9b8:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <Serial+0x1a>
 9bc:	82 17       	cp	r24, r18
 9be:	51 f0       	breq	.+20     	; 0x9d4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 9c0:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Serial+0x19>
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	e9 5e       	subi	r30, 0xE9	; 233
 9c8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ca:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 9cc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Serial+0x19>
 9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 9d2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 9d4:	ff 91       	pop	r31
 9d6:	ef 91       	pop	r30
 9d8:	9f 91       	pop	r25
 9da:	8f 91       	pop	r24
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti

000009e8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	6f 93       	push	r22
 9fc:	7f 93       	push	r23
 9fe:	8f 93       	push	r24
 a00:	9f 93       	push	r25
 a02:	af 93       	push	r26
 a04:	bf 93       	push	r27
 a06:	ef 93       	push	r30
 a08:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 a0a:	87 e1       	ldi	r24, 0x17	; 23
 a0c:	91 e0       	ldi	r25, 0x01	; 1
 a0e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 a12:	ff 91       	pop	r31
 a14:	ef 91       	pop	r30
 a16:	bf 91       	pop	r27
 a18:	af 91       	pop	r26
 a1a:	9f 91       	pop	r25
 a1c:	8f 91       	pop	r24
 a1e:	7f 91       	pop	r23
 a20:	6f 91       	pop	r22
 a22:	5f 91       	pop	r21
 a24:	4f 91       	pop	r20
 a26:	3f 91       	pop	r19
 a28:	2f 91       	pop	r18
 a2a:	0f 90       	pop	r0
 a2c:	0f be       	out	0x3f, r0	; 63
 a2e:	0f 90       	pop	r0
 a30:	1f 90       	pop	r1
 a32:	18 95       	reti

00000a34 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 a34:	87 e1       	ldi	r24, 0x17	; 23
 a36:	91 e0       	ldi	r25, 0x01	; 1
 a38:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN14HardwareSerial9availableEv>
 a3c:	21 e0       	ldi	r18, 0x01	; 1
 a3e:	89 2b       	or	r24, r25
 a40:	09 f4       	brne	.+2      	; 0xa44 <_Z17Serial0_availablev+0x10>
 a42:	20 e0       	ldi	r18, 0x00	; 0
}
 a44:	82 2f       	mov	r24, r18
 a46:	08 95       	ret

00000a48 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 a48:	e7 e1       	ldi	r30, 0x17	; 23
 a4a:	f1 e0       	ldi	r31, 0x01	; 1
 a4c:	13 82       	std	Z+3, r1	; 0x03
 a4e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 a50:	88 ee       	ldi	r24, 0xE8	; 232
 a52:	93 e0       	ldi	r25, 0x03	; 3
 a54:	a0 e0       	ldi	r26, 0x00	; 0
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	84 83       	std	Z+4, r24	; 0x04
 a5a:	95 83       	std	Z+5, r25	; 0x05
 a5c:	a6 83       	std	Z+6, r26	; 0x06
 a5e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 a60:	8a e0       	ldi	r24, 0x0A	; 10
 a62:	91 e0       	ldi	r25, 0x01	; 1
 a64:	91 83       	std	Z+1, r25	; 0x01
 a66:	80 83       	st	Z, r24
 a68:	85 ec       	ldi	r24, 0xC5	; 197
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	95 87       	std	Z+13, r25	; 0x0d
 a6e:	84 87       	std	Z+12, r24	; 0x0c
 a70:	84 ec       	ldi	r24, 0xC4	; 196
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	97 87       	std	Z+15, r25	; 0x0f
 a76:	86 87       	std	Z+14, r24	; 0x0e
 a78:	80 ec       	ldi	r24, 0xC0	; 192
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	91 8b       	std	Z+17, r25	; 0x11
 a7e:	80 8b       	std	Z+16, r24	; 0x10
 a80:	81 ec       	ldi	r24, 0xC1	; 193
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	93 8b       	std	Z+19, r25	; 0x13
 a86:	82 8b       	std	Z+18, r24	; 0x12
 a88:	82 ec       	ldi	r24, 0xC2	; 194
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	95 8b       	std	Z+21, r25	; 0x15
 a8e:	84 8b       	std	Z+20, r24	; 0x14
 a90:	86 ec       	ldi	r24, 0xC6	; 198
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	97 8b       	std	Z+23, r25	; 0x17
 a96:	86 8b       	std	Z+22, r24	; 0x16
 a98:	11 8e       	std	Z+25, r1	; 0x19
 a9a:	12 8e       	std	Z+26, r1	; 0x1a
 a9c:	13 8e       	std	Z+27, r1	; 0x1b
 a9e:	14 8e       	std	Z+28, r1	; 0x1c
 aa0:	08 95       	ret

00000aa2 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 aa2:	08 95       	ret

00000aa4 <main>:

int main(void)
{
	init();
 aa4:	0e 94 49 06 	call	0xc92	; 0xc92 <init>

	initVariant();
 aa8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 aac:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 ab0:	c5 ec       	ldi	r28, 0xC5	; 197
 ab2:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 ab4:	0e 94 94 01 	call	0x328	; 0x328 <loop>
		if (serialEventRun) serialEventRun();
 ab8:	20 97       	sbiw	r28, 0x00	; 0
 aba:	e1 f3       	breq	.-8      	; 0xab4 <main+0x10>
 abc:	0e 94 c5 03 	call	0x78a	; 0x78a <_Z14serialEventRunv>
 ac0:	f9 cf       	rjmp	.-14     	; 0xab4 <main+0x10>

00000ac2 <_ZN5Print5writeEPKhj>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 ac2:	cf 92       	push	r12
 ac4:	df 92       	push	r13
 ac6:	ef 92       	push	r14
 ac8:	ff 92       	push	r15
 aca:	0f 93       	push	r16
 acc:	1f 93       	push	r17
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	6c 01       	movw	r12, r24
 ad4:	7a 01       	movw	r14, r20
 ad6:	8b 01       	movw	r16, r22
 ad8:	c0 e0       	ldi	r28, 0x00	; 0
 ada:	d0 e0       	ldi	r29, 0x00	; 0
 adc:	ce 15       	cp	r28, r14
 ade:	df 05       	cpc	r29, r15
 ae0:	89 f0       	breq	.+34     	; 0xb04 <_ZN5Print5writeEPKhj+0x42>
 ae2:	d8 01       	movw	r26, r16
 ae4:	6d 91       	ld	r22, X+
 ae6:	8d 01       	movw	r16, r26
 ae8:	d6 01       	movw	r26, r12
 aea:	ed 91       	ld	r30, X+
 aec:	fc 91       	ld	r31, X
 aee:	01 90       	ld	r0, Z+
 af0:	f0 81       	ld	r31, Z
 af2:	e0 2d       	mov	r30, r0
 af4:	c6 01       	movw	r24, r12
 af6:	09 95       	icall
 af8:	89 2b       	or	r24, r25
 afa:	11 f4       	brne	.+4      	; 0xb00 <_ZN5Print5writeEPKhj+0x3e>
 afc:	7e 01       	movw	r14, r28
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <_ZN5Print5writeEPKhj+0x42>
 b00:	21 96       	adiw	r28, 0x01	; 1
 b02:	ec cf       	rjmp	.-40     	; 0xadc <_ZN5Print5writeEPKhj+0x1a>
 b04:	c7 01       	movw	r24, r14
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	1f 91       	pop	r17
 b0c:	0f 91       	pop	r16
 b0e:	ff 90       	pop	r15
 b10:	ef 90       	pop	r14
 b12:	df 90       	pop	r13
 b14:	cf 90       	pop	r12
 b16:	08 95       	ret

00000b18 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
 b18:	dc 01       	movw	r26, r24
 b1a:	ed 91       	ld	r30, X+
 b1c:	fc 91       	ld	r31, X
 b1e:	01 90       	ld	r0, Z+
 b20:	f0 81       	ld	r31, Z
 b22:	e0 2d       	mov	r30, r0
 b24:	09 94       	ijmp

00000b26 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 b26:	1f 92       	push	r1
 b28:	0f 92       	push	r0
 b2a:	0f b6       	in	r0, 0x3f	; 63
 b2c:	0f 92       	push	r0
 b2e:	11 24       	eor	r1, r1
 b30:	2f 93       	push	r18
 b32:	3f 93       	push	r19
 b34:	8f 93       	push	r24
 b36:	9f 93       	push	r25
 b38:	af 93       	push	r26
 b3a:	bf 93       	push	r27
 b3c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <timer0_millis>
 b40:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <timer0_millis+0x1>
 b44:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <timer0_millis+0x2>
 b48:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <timer0_millis+0x3>
 b4c:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <timer0_fract>
 b50:	23 e0       	ldi	r18, 0x03	; 3
 b52:	23 0f       	add	r18, r19
 b54:	2d 37       	cpi	r18, 0x7D	; 125
 b56:	20 f4       	brcc	.+8      	; 0xb60 <__vector_16+0x3a>
 b58:	01 96       	adiw	r24, 0x01	; 1
 b5a:	a1 1d       	adc	r26, r1
 b5c:	b1 1d       	adc	r27, r1
 b5e:	05 c0       	rjmp	.+10     	; 0xb6a <__vector_16+0x44>
 b60:	26 e8       	ldi	r18, 0x86	; 134
 b62:	23 0f       	add	r18, r19
 b64:	02 96       	adiw	r24, 0x02	; 2
 b66:	a1 1d       	adc	r26, r1
 b68:	b1 1d       	adc	r27, r1
 b6a:	20 93 b4 01 	sts	0x01B4, r18	; 0x8001b4 <timer0_fract>
 b6e:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <timer0_millis>
 b72:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <timer0_millis+0x1>
 b76:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <timer0_millis+0x2>
 b7a:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <timer0_millis+0x3>
 b7e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <timer0_overflow_count>
 b82:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <timer0_overflow_count+0x1>
 b86:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <timer0_overflow_count+0x2>
 b8a:	b0 91 bc 01 	lds	r27, 0x01BC	; 0x8001bc <timer0_overflow_count+0x3>
 b8e:	01 96       	adiw	r24, 0x01	; 1
 b90:	a1 1d       	adc	r26, r1
 b92:	b1 1d       	adc	r27, r1
 b94:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <timer0_overflow_count>
 b98:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <timer0_overflow_count+0x1>
 b9c:	a0 93 bb 01 	sts	0x01BB, r26	; 0x8001bb <timer0_overflow_count+0x2>
 ba0:	b0 93 bc 01 	sts	0x01BC, r27	; 0x8001bc <timer0_overflow_count+0x3>
 ba4:	bf 91       	pop	r27
 ba6:	af 91       	pop	r26
 ba8:	9f 91       	pop	r25
 baa:	8f 91       	pop	r24
 bac:	3f 91       	pop	r19
 bae:	2f 91       	pop	r18
 bb0:	0f 90       	pop	r0
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	0f 90       	pop	r0
 bb6:	1f 90       	pop	r1
 bb8:	18 95       	reti

00000bba <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 bba:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 bbc:	f8 94       	cli
	m = timer0_overflow_count;
 bbe:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <timer0_overflow_count>
 bc2:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <timer0_overflow_count+0x1>
 bc6:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <timer0_overflow_count+0x2>
 bca:	b0 91 bc 01 	lds	r27, 0x01BC	; 0x8001bc <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 bce:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 bd0:	a8 9b       	sbis	0x15, 0	; 21
 bd2:	05 c0       	rjmp	.+10     	; 0xbde <micros+0x24>
 bd4:	2f 3f       	cpi	r18, 0xFF	; 255
 bd6:	19 f0       	breq	.+6      	; 0xbde <micros+0x24>
		m++;
 bd8:	01 96       	adiw	r24, 0x01	; 1
 bda:	a1 1d       	adc	r26, r1
 bdc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 bde:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 be0:	ba 2f       	mov	r27, r26
 be2:	a9 2f       	mov	r26, r25
 be4:	98 2f       	mov	r25, r24
 be6:	88 27       	eor	r24, r24
 be8:	82 0f       	add	r24, r18
 bea:	91 1d       	adc	r25, r1
 bec:	a1 1d       	adc	r26, r1
 bee:	b1 1d       	adc	r27, r1
 bf0:	bc 01       	movw	r22, r24
 bf2:	cd 01       	movw	r24, r26
 bf4:	42 e0       	ldi	r20, 0x02	; 2
 bf6:	66 0f       	add	r22, r22
 bf8:	77 1f       	adc	r23, r23
 bfa:	88 1f       	adc	r24, r24
 bfc:	99 1f       	adc	r25, r25
 bfe:	4a 95       	dec	r20
 c00:	d1 f7       	brne	.-12     	; 0xbf6 <micros+0x3c>
}
 c02:	08 95       	ret

00000c04 <delay>:

void delay(unsigned long ms)
{
 c04:	8f 92       	push	r8
 c06:	9f 92       	push	r9
 c08:	af 92       	push	r10
 c0a:	bf 92       	push	r11
 c0c:	cf 92       	push	r12
 c0e:	df 92       	push	r13
 c10:	ef 92       	push	r14
 c12:	ff 92       	push	r15
 c14:	6b 01       	movw	r12, r22
 c16:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 c18:	0e 94 dd 05 	call	0xbba	; 0xbba <micros>
 c1c:	4b 01       	movw	r8, r22
 c1e:	5c 01       	movw	r10, r24

	while (ms > 0) {
 c20:	c1 14       	cp	r12, r1
 c22:	d1 04       	cpc	r13, r1
 c24:	e1 04       	cpc	r14, r1
 c26:	f1 04       	cpc	r15, r1
 c28:	01 f1       	breq	.+64     	; 0xc6a <delay+0x66>
		yield();
 c2a:	0e 94 4b 07 	call	0xe96	; 0xe96 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 c2e:	0e 94 dd 05 	call	0xbba	; 0xbba <micros>
 c32:	dc 01       	movw	r26, r24
 c34:	cb 01       	movw	r24, r22
 c36:	88 19       	sub	r24, r8
 c38:	99 09       	sbc	r25, r9
 c3a:	aa 09       	sbc	r26, r10
 c3c:	bb 09       	sbc	r27, r11
 c3e:	88 3e       	cpi	r24, 0xE8	; 232
 c40:	93 40       	sbci	r25, 0x03	; 3
 c42:	a1 05       	cpc	r26, r1
 c44:	b1 05       	cpc	r27, r1
 c46:	60 f3       	brcs	.-40     	; 0xc20 <delay+0x1c>
			ms--;
 c48:	21 e0       	ldi	r18, 0x01	; 1
 c4a:	c2 1a       	sub	r12, r18
 c4c:	d1 08       	sbc	r13, r1
 c4e:	e1 08       	sbc	r14, r1
 c50:	f1 08       	sbc	r15, r1
			start += 1000;
 c52:	88 ee       	ldi	r24, 0xE8	; 232
 c54:	88 0e       	add	r8, r24
 c56:	83 e0       	ldi	r24, 0x03	; 3
 c58:	98 1e       	adc	r9, r24
 c5a:	a1 1c       	adc	r10, r1
 c5c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 c5e:	c1 14       	cp	r12, r1
 c60:	d1 04       	cpc	r13, r1
 c62:	e1 04       	cpc	r14, r1
 c64:	f1 04       	cpc	r15, r1
 c66:	19 f7       	brne	.-58     	; 0xc2e <delay+0x2a>
 c68:	db cf       	rjmp	.-74     	; 0xc20 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 c6a:	ff 90       	pop	r15
 c6c:	ef 90       	pop	r14
 c6e:	df 90       	pop	r13
 c70:	cf 90       	pop	r12
 c72:	bf 90       	pop	r11
 c74:	af 90       	pop	r10
 c76:	9f 90       	pop	r9
 c78:	8f 90       	pop	r8
 c7a:	08 95       	ret

00000c7c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 c7c:	82 30       	cpi	r24, 0x02	; 2
 c7e:	91 05       	cpc	r25, r1
 c80:	38 f0       	brcs	.+14     	; 0xc90 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 c82:	88 0f       	add	r24, r24
 c84:	99 1f       	adc	r25, r25
 c86:	88 0f       	add	r24, r24
 c88:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 c8a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 c8c:	01 97       	sbiw	r24, 0x01	; 1
 c8e:	f1 f7       	brne	.-4      	; 0xc8c <delayMicroseconds+0x10>
 c90:	08 95       	ret

00000c92 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 c92:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 c94:	84 b5       	in	r24, 0x24	; 36
 c96:	82 60       	ori	r24, 0x02	; 2
 c98:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 c9a:	84 b5       	in	r24, 0x24	; 36
 c9c:	81 60       	ori	r24, 0x01	; 1
 c9e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 ca0:	85 b5       	in	r24, 0x25	; 37
 ca2:	82 60       	ori	r24, 0x02	; 2
 ca4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 ca6:	85 b5       	in	r24, 0x25	; 37
 ca8:	81 60       	ori	r24, 0x01	; 1
 caa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 cac:	ee e6       	ldi	r30, 0x6E	; 110
 cae:	f0 e0       	ldi	r31, 0x00	; 0
 cb0:	80 81       	ld	r24, Z
 cb2:	81 60       	ori	r24, 0x01	; 1
 cb4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 cb6:	e1 e8       	ldi	r30, 0x81	; 129
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 cbc:	80 81       	ld	r24, Z
 cbe:	82 60       	ori	r24, 0x02	; 2
 cc0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 cc2:	80 81       	ld	r24, Z
 cc4:	81 60       	ori	r24, 0x01	; 1
 cc6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 cc8:	e0 e8       	ldi	r30, 0x80	; 128
 cca:	f0 e0       	ldi	r31, 0x00	; 0
 ccc:	80 81       	ld	r24, Z
 cce:	81 60       	ori	r24, 0x01	; 1
 cd0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 cd2:	e1 eb       	ldi	r30, 0xB1	; 177
 cd4:	f0 e0       	ldi	r31, 0x00	; 0
 cd6:	80 81       	ld	r24, Z
 cd8:	84 60       	ori	r24, 0x04	; 4
 cda:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 cdc:	e0 eb       	ldi	r30, 0xB0	; 176
 cde:	f0 e0       	ldi	r31, 0x00	; 0
 ce0:	80 81       	ld	r24, Z
 ce2:	81 60       	ori	r24, 0x01	; 1
 ce4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 ce6:	ea e7       	ldi	r30, 0x7A	; 122
 ce8:	f0 e0       	ldi	r31, 0x00	; 0
 cea:	80 81       	ld	r24, Z
 cec:	84 60       	ori	r24, 0x04	; 4
 cee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 cf0:	80 81       	ld	r24, Z
 cf2:	82 60       	ori	r24, 0x02	; 2
 cf4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 cf6:	80 81       	ld	r24, Z
 cf8:	81 60       	ori	r24, 0x01	; 1
 cfa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 cfc:	80 81       	ld	r24, Z
 cfe:	80 68       	ori	r24, 0x80	; 128
 d00:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 d02:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 d06:	08 95       	ret

00000d08 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 d08:	83 30       	cpi	r24, 0x03	; 3
 d0a:	81 f0       	breq	.+32     	; 0xd2c <turnOffPWM+0x24>
 d0c:	28 f4       	brcc	.+10     	; 0xd18 <turnOffPWM+0x10>
 d0e:	81 30       	cpi	r24, 0x01	; 1
 d10:	99 f0       	breq	.+38     	; 0xd38 <turnOffPWM+0x30>
 d12:	82 30       	cpi	r24, 0x02	; 2
 d14:	a1 f0       	breq	.+40     	; 0xd3e <turnOffPWM+0x36>
 d16:	08 95       	ret
 d18:	87 30       	cpi	r24, 0x07	; 7
 d1a:	a9 f0       	breq	.+42     	; 0xd46 <turnOffPWM+0x3e>
 d1c:	88 30       	cpi	r24, 0x08	; 8
 d1e:	b9 f0       	breq	.+46     	; 0xd4e <turnOffPWM+0x46>
 d20:	84 30       	cpi	r24, 0x04	; 4
 d22:	d1 f4       	brne	.+52     	; 0xd58 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 d24:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 d28:	8f 7d       	andi	r24, 0xDF	; 223
 d2a:	03 c0       	rjmp	.+6      	; 0xd32 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 d2c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 d30:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 d32:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 d36:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 d38:	84 b5       	in	r24, 0x24	; 36
 d3a:	8f 77       	andi	r24, 0x7F	; 127
 d3c:	02 c0       	rjmp	.+4      	; 0xd42 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 d3e:	84 b5       	in	r24, 0x24	; 36
 d40:	8f 7d       	andi	r24, 0xDF	; 223
 d42:	84 bd       	out	0x24, r24	; 36
 d44:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 d46:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d4a:	8f 77       	andi	r24, 0x7F	; 127
 d4c:	03 c0       	rjmp	.+6      	; 0xd54 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 d4e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d52:	8f 7d       	andi	r24, 0xDF	; 223
 d54:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d58:	08 95       	ret

00000d5a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 d5a:	cf 93       	push	r28
 d5c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	fc 01       	movw	r30, r24
 d62:	e4 58       	subi	r30, 0x84	; 132
 d64:	ff 4f       	sbci	r31, 0xFF	; 255
 d66:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 d68:	fc 01       	movw	r30, r24
 d6a:	e0 57       	subi	r30, 0x70	; 112
 d6c:	ff 4f       	sbci	r31, 0xFF	; 255
 d6e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 d70:	88 23       	and	r24, r24
 d72:	61 f1       	breq	.+88     	; 0xdcc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	88 0f       	add	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	fc 01       	movw	r30, r24
 d7c:	e8 54       	subi	r30, 0x48	; 72
 d7e:	ff 4f       	sbci	r31, 0xFF	; 255
 d80:	c5 91       	lpm	r28, Z+
 d82:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 d84:	fc 01       	movw	r30, r24
 d86:	e2 55       	subi	r30, 0x52	; 82
 d88:	ff 4f       	sbci	r31, 0xFF	; 255
 d8a:	a5 91       	lpm	r26, Z+
 d8c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 d8e:	61 11       	cpse	r22, r1
 d90:	09 c0       	rjmp	.+18     	; 0xda4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 d92:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d94:	f8 94       	cli
		*reg &= ~bit;
 d96:	88 81       	ld	r24, Y
 d98:	20 95       	com	r18
 d9a:	82 23       	and	r24, r18
 d9c:	88 83       	st	Y, r24
		*out &= ~bit;
 d9e:	ec 91       	ld	r30, X
 da0:	2e 23       	and	r18, r30
 da2:	0b c0       	rjmp	.+22     	; 0xdba <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 da4:	62 30       	cpi	r22, 0x02	; 2
 da6:	61 f4       	brne	.+24     	; 0xdc0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 da8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 daa:	f8 94       	cli
		*reg &= ~bit;
 dac:	38 81       	ld	r19, Y
 dae:	82 2f       	mov	r24, r18
 db0:	80 95       	com	r24
 db2:	83 23       	and	r24, r19
 db4:	88 83       	st	Y, r24
		*out |= bit;
 db6:	ec 91       	ld	r30, X
 db8:	2e 2b       	or	r18, r30
 dba:	2c 93       	st	X, r18
		SREG = oldSREG;
 dbc:	9f bf       	out	0x3f, r25	; 63
 dbe:	06 c0       	rjmp	.+12     	; 0xdcc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 dc0:	8f b7       	in	r24, 0x3f	; 63
                cli();
 dc2:	f8 94       	cli
		*reg |= bit;
 dc4:	e8 81       	ld	r30, Y
 dc6:	2e 2b       	or	r18, r30
 dc8:	28 83       	st	Y, r18
		SREG = oldSREG;
 dca:	8f bf       	out	0x3f, r24	; 63
	}
}
 dcc:	df 91       	pop	r29
 dce:	cf 91       	pop	r28
 dd0:	08 95       	ret

00000dd2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 dd2:	1f 93       	push	r17
 dd4:	cf 93       	push	r28
 dd6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 dd8:	28 2f       	mov	r18, r24
 dda:	30 e0       	ldi	r19, 0x00	; 0
 ddc:	f9 01       	movw	r30, r18
 dde:	e8 59       	subi	r30, 0x98	; 152
 de0:	ff 4f       	sbci	r31, 0xFF	; 255
 de2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 de4:	f9 01       	movw	r30, r18
 de6:	e4 58       	subi	r30, 0x84	; 132
 de8:	ff 4f       	sbci	r31, 0xFF	; 255
 dea:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 dec:	f9 01       	movw	r30, r18
 dee:	e0 57       	subi	r30, 0x70	; 112
 df0:	ff 4f       	sbci	r31, 0xFF	; 255
 df2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 df4:	cc 23       	and	r28, r28
 df6:	c9 f0       	breq	.+50     	; 0xe2a <digitalWrite+0x58>
 df8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 dfa:	81 11       	cpse	r24, r1
 dfc:	0e 94 84 06 	call	0xd08	; 0xd08 <turnOffPWM>

	out = portOutputRegister(port);
 e00:	ec 2f       	mov	r30, r28
 e02:	f0 e0       	ldi	r31, 0x00	; 0
 e04:	ee 0f       	add	r30, r30
 e06:	ff 1f       	adc	r31, r31
 e08:	e2 55       	subi	r30, 0x52	; 82
 e0a:	ff 4f       	sbci	r31, 0xFF	; 255
 e0c:	a5 91       	lpm	r26, Z+
 e0e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 e10:	8f b7       	in	r24, 0x3f	; 63
	cli();
 e12:	f8 94       	cli

	if (val == LOW) {
 e14:	11 11       	cpse	r17, r1
 e16:	05 c0       	rjmp	.+10     	; 0xe22 <digitalWrite+0x50>
		*out &= ~bit;
 e18:	9c 91       	ld	r25, X
 e1a:	ed 2f       	mov	r30, r29
 e1c:	e0 95       	com	r30
 e1e:	e9 23       	and	r30, r25
 e20:	02 c0       	rjmp	.+4      	; 0xe26 <digitalWrite+0x54>
	} else {
		*out |= bit;
 e22:	ec 91       	ld	r30, X
 e24:	ed 2b       	or	r30, r29
 e26:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 e28:	8f bf       	out	0x3f, r24	; 63
}
 e2a:	df 91       	pop	r29
 e2c:	cf 91       	pop	r28
 e2e:	1f 91       	pop	r17
 e30:	08 95       	ret

00000e32 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
 e32:	0f 93       	push	r16
 e34:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
 e36:	90 e0       	ldi	r25, 0x00	; 0
 e38:	fc 01       	movw	r30, r24
 e3a:	e4 58       	subi	r30, 0x84	; 132
 e3c:	ff 4f       	sbci	r31, 0xFF	; 255
 e3e:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
 e40:	fc 01       	movw	r30, r24
 e42:	e0 57       	subi	r30, 0x70	; 112
 e44:	ff 4f       	sbci	r31, 0xFF	; 255
 e46:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
 e48:	66 23       	and	r22, r22
 e4a:	11 f0       	breq	.+4      	; 0xe50 <pulseIn+0x1e>
 e4c:	67 2f       	mov	r22, r23
 e4e:	01 c0       	rjmp	.+2      	; 0xe52 <pulseIn+0x20>
 e50:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
 e52:	f0 e0       	ldi	r31, 0x00	; 0
 e54:	ee 0f       	add	r30, r30
 e56:	ff 1f       	adc	r31, r31
 e58:	ec 55       	subi	r30, 0x5C	; 92
 e5a:	ff 4f       	sbci	r31, 0xFF	; 255
 e5c:	85 91       	lpm	r24, Z+
 e5e:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
	uint8_t stateMask = (state ? bit : 0);

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
 e60:	89 01       	movw	r16, r18
 e62:	9a 01       	movw	r18, r20
 e64:	3f 70       	andi	r19, 0x0F	; 15

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
 e66:	46 2f       	mov	r20, r22
 e68:	67 2f       	mov	r22, r23
 e6a:	0e 94 8c 00 	call	0x118	; 0x118 <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
 e6e:	61 15       	cp	r22, r1
 e70:	71 05       	cpc	r23, r1
 e72:	81 05       	cpc	r24, r1
 e74:	91 05       	cpc	r25, r1
 e76:	49 f0       	breq	.+18     	; 0xe8a <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
 e78:	dc 01       	movw	r26, r24
 e7a:	cb 01       	movw	r24, r22
 e7c:	01 96       	adiw	r24, 0x01	; 1
 e7e:	a1 1d       	adc	r26, r1
 e80:	b1 1d       	adc	r27, r1
 e82:	bc 01       	movw	r22, r24
 e84:	cd 01       	movw	r24, r26
 e86:	9f 70       	andi	r25, 0x0F	; 15
 e88:	03 c0       	rjmp	.+6      	; 0xe90 <pulseIn+0x5e>
	else
		return 0;
 e8a:	60 e0       	ldi	r22, 0x00	; 0
 e8c:	70 e0       	ldi	r23, 0x00	; 0
 e8e:	cb 01       	movw	r24, r22
}
 e90:	1f 91       	pop	r17
 e92:	0f 91       	pop	r16
 e94:	08 95       	ret

00000e96 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 e96:	08 95       	ret

00000e98 <__udivmodsi4>:
 e98:	a1 e2       	ldi	r26, 0x21	; 33
 e9a:	1a 2e       	mov	r1, r26
 e9c:	aa 1b       	sub	r26, r26
 e9e:	bb 1b       	sub	r27, r27
 ea0:	fd 01       	movw	r30, r26
 ea2:	0d c0       	rjmp	.+26     	; 0xebe <__udivmodsi4_ep>

00000ea4 <__udivmodsi4_loop>:
 ea4:	aa 1f       	adc	r26, r26
 ea6:	bb 1f       	adc	r27, r27
 ea8:	ee 1f       	adc	r30, r30
 eaa:	ff 1f       	adc	r31, r31
 eac:	a2 17       	cp	r26, r18
 eae:	b3 07       	cpc	r27, r19
 eb0:	e4 07       	cpc	r30, r20
 eb2:	f5 07       	cpc	r31, r21
 eb4:	20 f0       	brcs	.+8      	; 0xebe <__udivmodsi4_ep>
 eb6:	a2 1b       	sub	r26, r18
 eb8:	b3 0b       	sbc	r27, r19
 eba:	e4 0b       	sbc	r30, r20
 ebc:	f5 0b       	sbc	r31, r21

00000ebe <__udivmodsi4_ep>:
 ebe:	66 1f       	adc	r22, r22
 ec0:	77 1f       	adc	r23, r23
 ec2:	88 1f       	adc	r24, r24
 ec4:	99 1f       	adc	r25, r25
 ec6:	1a 94       	dec	r1
 ec8:	69 f7       	brne	.-38     	; 0xea4 <__udivmodsi4_loop>
 eca:	60 95       	com	r22
 ecc:	70 95       	com	r23
 ece:	80 95       	com	r24
 ed0:	90 95       	com	r25
 ed2:	9b 01       	movw	r18, r22
 ed4:	ac 01       	movw	r20, r24
 ed6:	bd 01       	movw	r22, r26
 ed8:	cf 01       	movw	r24, r30
 eda:	08 95       	ret

00000edc <__divmodsi4>:
 edc:	05 2e       	mov	r0, r21
 ede:	97 fb       	bst	r25, 7
 ee0:	1e f4       	brtc	.+6      	; 0xee8 <__divmodsi4+0xc>
 ee2:	00 94       	com	r0
 ee4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__negsi2>
 ee8:	57 fd       	sbrc	r21, 7
 eea:	07 d0       	rcall	.+14     	; 0xefa <__divmodsi4_neg2>
 eec:	0e 94 4c 07 	call	0xe98	; 0xe98 <__udivmodsi4>
 ef0:	07 fc       	sbrc	r0, 7
 ef2:	03 d0       	rcall	.+6      	; 0xefa <__divmodsi4_neg2>
 ef4:	4e f4       	brtc	.+18     	; 0xf08 <__divmodsi4_exit>
 ef6:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__negsi2>

00000efa <__divmodsi4_neg2>:
 efa:	50 95       	com	r21
 efc:	40 95       	com	r20
 efe:	30 95       	com	r19
 f00:	21 95       	neg	r18
 f02:	3f 4f       	sbci	r19, 0xFF	; 255
 f04:	4f 4f       	sbci	r20, 0xFF	; 255
 f06:	5f 4f       	sbci	r21, 0xFF	; 255

00000f08 <__divmodsi4_exit>:
 f08:	08 95       	ret

00000f0a <__negsi2>:
 f0a:	90 95       	com	r25
 f0c:	80 95       	com	r24
 f0e:	70 95       	com	r23
 f10:	61 95       	neg	r22
 f12:	7f 4f       	sbci	r23, 0xFF	; 255
 f14:	8f 4f       	sbci	r24, 0xFF	; 255
 f16:	9f 4f       	sbci	r25, 0xFF	; 255
 f18:	08 95       	ret

00000f1a <__tablejump2__>:
 f1a:	ee 0f       	add	r30, r30
 f1c:	ff 1f       	adc	r31, r31
 f1e:	05 90       	lpm	r0, Z+
 f20:	f4 91       	lpm	r31, Z
 f22:	e0 2d       	mov	r30, r0
 f24:	09 94       	ijmp

00000f26 <_exit>:
 f26:	f8 94       	cli

00000f28 <__stop_program>:
 f28:	ff cf       	rjmp	.-2      	; 0xf28 <__stop_program>
