
sketch_sep06a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000010ca  0000115e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800120  00800120  0000117e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000117e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  000011f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007e0a  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f2  00000000  00000000  00009312  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b7e  00000000  00000000  0000a804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c8  00000000  00000000  0000c384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bcc  00000000  00000000  0000cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035e4  00000000  00000000  0000e818  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  00011dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_18>
      4c:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	3a 05       	cpc	r19, r10

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ea ec       	ldi	r30, 0xCA	; 202
      d8:	f0 e1       	ldi	r31, 0x10	; 16
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a0 32       	cpi	r26, 0x20	; 32
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	21 e0       	ldi	r18, 0x01	; 1
      e8:	a0 e2       	ldi	r26, 0x20	; 32
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a6 3c       	cpi	r26, 0xC6	; 198
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 68 05 	call	0xad0	; 0xad0 <main>
     110:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     118:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     11a:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     11c:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     11e:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     120:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     122:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     124:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     126:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     128:	05 c0       	rjmp	.+10     	; 0x134 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     12a:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     12c:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     12e:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     130:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     132:	61 f1       	breq	.+88     	; 0x18c <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     134:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     136:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     138:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     13a:	b9 f3       	breq	.-18     	; 0x12a <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     13c:	05 c0       	rjmp	.+10     	; 0x148 <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     13e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     140:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     142:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     144:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     146:	11 f1       	breq	.+68     	; 0x18c <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     148:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     14a:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     14c:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     14e:	f7 cf       	rjmp	.-18     	; 0x13e <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     150:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     152:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     154:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     156:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     158:	0a c0       	rjmp	.+20     	; 0x16e <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     15a:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     15c:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     15e:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     160:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     162:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     164:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     166:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     168:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     16a:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     16c:	79 f0       	breq	.+30     	; 0x18c <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     16e:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     170:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     172:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     174:	91 f3       	breq	.-28     	; 0x15a <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     176:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     178:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     17a:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     17c:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     17e:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     180:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     182:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     184:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     186:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     188:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     18a:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     18c:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     18e:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     190:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     192:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     194:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     196:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     198:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     19a:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     19c:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     19e:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     1a0:	08 95       	ret

000001a2 <setup>:
int val = 0;    
int delay_time = 100 ;                // variable for reading the pin status
// the setup function runs once when you press reset or power the board
void setup() {
	// initialize digital pin 13 as an output.
	pinMode(LED01, OUTPUT);
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <LED01>
     1a8:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	pinMode(LED02, OUTPUT);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LED02>
     1b2:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	pinMode(LED03, OUTPUT);
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <LED03>
     1bc:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	pinMode(LED04, OUTPUT);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LED04>
     1c6:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	pinMode(LED05, OUTPUT);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <LED05>
     1d0:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	pinMode(LED06, OUTPUT);
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LED06>
     1da:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	pinMode(LED07, OUTPUT);
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LED07>
     1e4:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	
	 pinMode(trigPin1, OUTPUT);
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	8d e0       	ldi	r24, 0x0D	; 13
     1ec:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	 pinMode(echoPin1, INPUT);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	8c e0       	ldi	r24, 0x0C	; 12
     1f4:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	 
	 pinMode(trigPin2, OUTPUT);
     1f8:	61 e0       	ldi	r22, 0x01	; 1
     1fa:	8b e0       	ldi	r24, 0x0B	; 11
     1fc:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
	 pinMode(echoPin2, INPUT);
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	8a e0       	ldi	r24, 0x0A	; 10
     204:	0e 94 7d 07 	call	0xefa	; 0xefa <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     208:	26 e0       	ldi	r18, 0x06	; 6
     20a:	40 e8       	ldi	r20, 0x80	; 128
     20c:	55 e2       	ldi	r21, 0x25	; 37
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	80 e2       	ldi	r24, 0x20	; 32
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <_ZN14HardwareSerial5beginEmh>

0000021a <_Z8isActivei>:
Serial.begin(9600); //set baud rate
}

// the loop function runs over and over again forever

bool isActive(int sensor){
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
		int trigPin,echoPin ;
		if (sensor == 1){
			trigPin= trigPin1;
			echoPin = echoPin1 ;
		}
		if (sensor == 2){
     21e:	02 97       	sbiw	r24, 0x02	; 2
     220:	19 f4       	brne	.+6      	; 0x228 <_Z8isActivei+0xe>
			trigPin= trigPin2;
			echoPin = echoPin2 ;
     222:	da e0       	ldi	r29, 0x0A	; 10
		if (sensor == 1){
			trigPin= trigPin1;
			echoPin = echoPin1 ;
		}
		if (sensor == 2){
			trigPin= trigPin2;
     224:	cb e0       	ldi	r28, 0x0B	; 11
     226:	02 c0       	rjmp	.+4      	; 0x22c <_Z8isActivei+0x12>
     228:	dc e0       	ldi	r29, 0x0C	; 12
     22a:	cd e0       	ldi	r28, 0x0D	; 13
			echoPin = echoPin2 ;
		}

		long duration, distance ;
		digitalWrite(trigPin, LOW);  // Added this line
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	8c 2f       	mov	r24, r28
     230:	0e 94 b9 07 	call	0xf72	; 0xf72 <digitalWrite>
		delayMicroseconds(1); // Added this line
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 0e 07 	call	0xe1c	; 0xe1c <delayMicroseconds>
		digitalWrite(trigPin, HIGH);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	8c 2f       	mov	r24, r28
     240:	0e 94 b9 07 	call	0xf72	; 0xf72 <digitalWrite>
		//  delayMicroseconds(1000); - Removed this line
		delayMicroseconds(10); // Added this line
     244:	8a e0       	ldi	r24, 0x0A	; 10
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 0e 07 	call	0xe1c	; 0xe1c <delayMicroseconds>
		digitalWrite(trigPin, LOW);;
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	8c 2f       	mov	r24, r28
     250:	0e 94 b9 07 	call	0xf72	; 0xf72 <digitalWrite>
		duration = pulseIn(echoPin, HIGH);
     254:	20 e4       	ldi	r18, 0x40	; 64
     256:	32 e4       	ldi	r19, 0x42	; 66
     258:	4f e0       	ldi	r20, 0x0F	; 15
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8d 2f       	mov	r24, r29
     260:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <pulseIn>
		distance = (duration/2) / 29.1;
     264:	22 e0       	ldi	r18, 0x02	; 2
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodsi4>
     270:	ca 01       	movw	r24, r20
     272:	b9 01       	movw	r22, r18
     274:	0e 94 21 03 	call	0x642	; 0x642 <__floatsisf>
     278:	2d ec       	ldi	r18, 0xCD	; 205
     27a:	3c ec       	ldi	r19, 0xCC	; 204
     27c:	48 ee       	ldi	r20, 0xE8	; 232
     27e:	51 e4       	ldi	r21, 0x41	; 65
     280:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
     284:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixsfsi>
		
		if ((distance < 10)) {  // This is where the LED On/Off happens
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	6a 30       	cpi	r22, 0x0A	; 10
     28c:	71 05       	cpc	r23, r1
     28e:	81 05       	cpc	r24, r1
     290:	91 05       	cpc	r25, r1
     292:	0c f0       	brlt	.+2      	; 0x296 <_Z8isActivei+0x7c>
     294:	20 e0       	ldi	r18, 0x00	; 0
		}
		else {
			return false;
		}
		return false;
}
     296:	82 2f       	mov	r24, r18
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <_Z6isPlayii>:
}
void increase_volume(){
	sendCommand(2);
	delay(delay_time);
}
bool isPlay(int first,int second){
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	8c 01       	movw	r16, r24
     2ac:	7b 01       	movw	r14, r22
	int t = 50 ;
     2ae:	c2 e3       	ldi	r28, 0x32	; 50
     2b0:	d0 e0       	ldi	r29, 0x00	; 0
	while (t > 0) {
		delay(10);
     2b2:	6a e0       	ldi	r22, 0x0A	; 10
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 d2 06 	call	0xda4	; 0xda4 <delay>
		t = t-1 ;
     2be:	21 97       	sbiw	r28, 0x01	; 1
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
     2c0:	c8 01       	movw	r24, r16
     2c2:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     2c6:	81 11       	cpse	r24, r1
     2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <_Z6isPlayii+0x36>
     2ca:	c2 30       	cpi	r28, 0x02	; 2
     2cc:	d1 05       	cpc	r29, r1
     2ce:	3c f0       	brlt	.+14     	; 0x2de <_Z6isPlayii+0x40>
			return false;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <_Z6isPlayii+0x46>
bool isPlay(int first,int second){
	int t = 50 ;
	while (t > 0) {
		delay(10);
		t = t-1 ;
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
     2d4:	c7 01       	movw	r24, r14
     2d6:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     2da:	88 23       	and	r24, r24
     2dc:	b1 f3       	breq	.-20     	; 0x2ca <_Z6isPlayii+0x2c>
	sendCommand(2);
	delay(delay_time);
}
bool isPlay(int first,int second){
	int t = 50 ;
	while (t > 0) {
     2de:	20 97       	sbiw	r28, 0x00	; 0
     2e0:	41 f7       	brne	.-48     	; 0x2b2 <_Z6isPlayii+0x14>
		t = t-1 ;
		if	(((isActive(first) && isActive(second)) == 0) && (t > 1)){
			return false;
		}
	}
	return true ;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	08 95       	ret

000002f2 <_Z11sendCommandi>:
		else {
			return false;
		}
		return false;
}
void sendCommand(int command){
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	ec 01       	movw	r28, r24
	if(!Serial.available())
     2f8:	80 e2       	ldi	r24, 0x20	; 32
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 ad 03 	call	0x75a	; 0x75a <_ZN14HardwareSerial9availableEv>
     300:	89 2b       	or	r24, r25
     302:	49 f4       	brne	.+18     	; 0x316 <_Z11sendCommandi+0x24>
	{
		Serial.print(command);
     304:	4a e0       	ldi	r20, 0x0A	; 10
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	be 01       	movw	r22, r28
     30a:	80 e2       	ldi	r24, 0x20	; 32
     30c:	91 e0       	ldi	r25, 0x01	; 1
	}	
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
		return false;
}
void sendCommand(int command){
	if(!Serial.available())
	{
		Serial.print(command);
     312:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_ZN5Print5printEii>
	}	
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_Z4playv>:
void play(){
	sendCommand(4);	
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_Z11sendCommandi>

00000324 <_Z13previous_songv>:
}
void previous_song(){
	sendCommand(3);
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_Z11sendCommandi>
	delay(100);
     32c:	64 e6       	ldi	r22, 0x64	; 100
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <delay>

00000338 <_Z9next_Songv>:
}
void next_Song(){
	sendCommand(5);
     338:	85 e0       	ldi	r24, 0x05	; 5
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_Z11sendCommandi>
	delay(100);	
     340:	64 e6       	ldi	r22, 0x64	; 100
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <delay>

0000034c <_Z13reduce_volumev>:
} 

void reduce_volume(){
	sendCommand(1);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_Z11sendCommandi>
	delay(delay_time);
     354:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     358:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     35c:	07 2e       	mov	r0, r23
     35e:	00 0c       	add	r0, r0
     360:	88 0b       	sbc	r24, r24
     362:	99 0b       	sbc	r25, r25
     364:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <delay>

00000368 <_Z15increase_volumev>:
}
void increase_volume(){
	sendCommand(2);
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_Z11sendCommandi>
	delay(delay_time);
     370:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     374:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     378:	07 2e       	mov	r0, r23
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <delay>

00000384 <loop>:
			return false;
		}
	}
	return true ;
}
void loop() {
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29

		first_sensor = 1;
		second_sensor = 2;
		while (1){
		while (1) {
			if (isActive(1)) {
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     39c:	81 11       	cpse	r24, r1
     39e:	0c c0       	rjmp	.+24     	; 0x3b8 <loop+0x34>
				first_sensor = 1;
				second_sensor = 2;           // check if the input is HIGH
				break;
			}
			if (isActive(2)) {            // check if the input is HIGH
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     3a8:	88 23       	and	r24, r24
     3aa:	a1 f3       	breq	.-24     	; 0x394 <loop+0x10>
				first_sensor = 2;
				second_sensor = 1;
     3ac:	ee 24       	eor	r14, r14
     3ae:	e3 94       	inc	r14
     3b0:	f1 2c       	mov	r15, r1
				first_sensor = 1;
				second_sensor = 2;           // check if the input is HIGH
				break;
			}
			if (isActive(2)) {            // check if the input is HIGH
				first_sensor = 2;
     3b2:	c2 e0       	ldi	r28, 0x02	; 2
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <loop+0x3e>
		second_sensor = 2;
		while (1){
		while (1) {
			if (isActive(1)) {
				first_sensor = 1;
				second_sensor = 2;           // check if the input is HIGH
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	e9 2e       	mov	r14, r25
     3bc:	f1 2c       	mov	r15, r1
		first_sensor = 1;
		second_sensor = 2;
		while (1){
		while (1) {
			if (isActive(1)) {
				first_sensor = 1;
     3be:	c1 e0       	ldi	r28, 0x01	; 1
     3c0:	d0 e0       	ldi	r29, 0x00	; 0
				second_sensor = 2;           // check if the input is HIGH
				break;
			}
			if (isActive(2)) {            // check if the input is HIGH
				first_sensor = 2;
     3c2:	05 e0       	ldi	r16, 0x05	; 5
     3c4:	10 e0       	ldi	r17, 0x00	; 0
				second_sensor = 1;
				break;
			}
		}
		t = 5 ;
		x = 10 ;
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	c8 2e       	mov	r12, r24
     3ca:	d1 2c       	mov	r13, r1
		break_flag = false;
		while (t > 0)
		{
			delay(5);
     3cc:	65 e0       	ldi	r22, 0x05	; 5
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 d2 06 	call	0xda4	; 0xda4 <delay>
			while (x > 0) {
     3d8:	c1 14       	cp	r12, r1
     3da:	d1 04       	cpc	r13, r1
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <loop+0x5c>
     3de:	69 c0       	rjmp	.+210    	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
				if (isActive(second_sensor)) {
     3e0:	c7 01       	movw	r24, r14
     3e2:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     3e6:	88 23       	and	r24, r24
     3e8:	09 f4       	brne	.+2      	; 0x3ec <loop+0x68>
     3ea:	3f c0       	rjmp	.+126    	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
					if (second_sensor == 1){
     3ec:	ea 94       	dec	r14
     3ee:	ef 28       	or	r14, r15
     3f0:	f1 f4       	brne	.+60     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
						if (isPlay(first_sensor,second_sensor)) {
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 4f 01 	call	0x29e	; 0x29e <_Z6isPlayii>
     3fc:	88 23       	and	r24, r24
     3fe:	a1 f0       	breq	.+40     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
							play();
     400:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z4playv>
							while (isActive(first_sensor) && isActive(second_sensor)) {
     404:	ce 01       	movw	r24, r28
     406:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     40a:	88 23       	and	r24, r24
     40c:	c1 f1       	breq	.+112    	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     416:	88 23       	and	r24, r24
     418:	91 f1       	breq	.+100    	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
								delay(15);
     41a:	6f e0       	ldi	r22, 0x0F	; 15
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 d2 06 	call	0xda4	; 0xda4 <delay>
     426:	ee cf       	rjmp	.-36     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
							}
							break_flag = true;
							break;	
						}
						// previous Song
						previous_song();
     428:	0e 94 92 01 	call	0x324	; 0x324 <_Z13previous_songv>
						break_flag = true;
						break;
     42c:	28 c0       	rjmp	.+80     	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
					}
					if (second_sensor == 2){
						if (isPlay(first_sensor,second_sensor)) {
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	ce 01       	movw	r24, r28
     434:	0e 94 4f 01 	call	0x29e	; 0x29e <_Z6isPlayii>
     438:	88 23       	and	r24, r24
     43a:	a1 f0       	breq	.+40     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
							play();
     43c:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z4playv>
							while (isActive(first_sensor) && isActive(second_sensor)) {
     440:	ce 01       	movw	r24, r28
     442:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     446:	88 23       	and	r24, r24
     448:	d1 f0       	breq	.+52     	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     452:	88 23       	and	r24, r24
     454:	a1 f0       	breq	.+40     	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
								delay(15);
     456:	6f e0       	ldi	r22, 0x0F	; 15
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 d2 06 	call	0xda4	; 0xda4 <delay>
     462:	ee cf       	rjmp	.-36     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
							}
							break_flag = true;
							break;
						}
						// Next Song
						next_Song();
     464:	0e 94 9c 01 	call	0x338	; 0x338 <_Z9next_Songv>
						break_flag = true;
						break;
     468:	0a c0       	rjmp	.+20     	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
					}
				}
				delay(5);
     46a:	65 e0       	ldi	r22, 0x05	; 5
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 d2 06 	call	0xda4	; 0xda4 <delay>
				x = x-1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	c8 1a       	sub	r12, r24
     47a:	d1 08       	sbc	r13, r1
     47c:	ad cf       	rjmp	.-166    	; 0x3d8 <loop+0x54>
			}
			if (break_flag){
				delay(100);
     47e:	64 e6       	ldi	r22, 0x64	; 100
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 d2 06 	call	0xda4	; 0xda4 <delay>
				break;
					}
			t = t-1;	
		}
		if (break_flag){
			delay(100);
     48a:	64 e6       	ldi	r22, 0x64	; 100
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 d2 06 	call	0xda4	; 0xda4 <delay>
				
			}
		}
		
		}
		delay(500);
     496:	64 ef       	ldi	r22, 0xF4	; 244
     498:	71 e0       	ldi	r23, 0x01	; 1
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
		}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
				
			}
		}
		
		}
		delay(500);
     4ae:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <delay>
     4b2:	01 50       	subi	r16, 0x01	; 1
     4b4:	11 09       	sbc	r17, r1
			}
		}
		t = 5 ;
		x = 10 ;
		break_flag = false;
		while (t > 0)
     4b6:	09 f0       	breq	.+2      	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
     4b8:	89 cf       	rjmp	.-238    	; 0x3cc <loop+0x48>
		}
		if (break_flag){
			delay(100);
			break;
		}
		if (isActive(first_sensor)){
     4ba:	ce 01       	movw	r24, r28
     4bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     4c0:	88 23       	and	r24, r24
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
     4c4:	67 cf       	rjmp	.-306    	; 0x394 <loop+0x10>
			if (first_sensor == 1){
     4c6:	21 97       	sbiw	r28, 0x01	; 1
     4c8:	49 f4       	brne	.+18     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
				while (isActive(first_sensor)) {
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     4d2:	88 23       	and	r24, r24
     4d4:	01 f3       	breq	.-64     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
					reduce_volume();
     4d6:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z13reduce_volumev>
     4da:	f7 cf       	rjmp	.-18     	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
				}
				break;
				
			}
			if (first_sensor == 2){
				while (isActive(first_sensor)){
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z8isActivei>
     4e4:	88 23       	and	r24, r24
     4e6:	b9 f2       	breq	.-82     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
					increase_volume();
     4e8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z15increase_volumev>
     4ec:	f7 cf       	rjmp	.-18     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>

000004ee <__divsf3>:
     4ee:	0e 94 8b 02 	call	0x516	; 0x516 <__divsf3x>
     4f2:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__fp_round>
     4f6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_pscB>
     4fa:	58 f0       	brcs	.+22     	; 0x512 <__divsf3+0x24>
     4fc:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscA>
     500:	40 f0       	brcs	.+16     	; 0x512 <__divsf3+0x24>
     502:	29 f4       	brne	.+10     	; 0x50e <__divsf3+0x20>
     504:	5f 3f       	cpi	r21, 0xFF	; 255
     506:	29 f0       	breq	.+10     	; 0x512 <__divsf3+0x24>
     508:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__fp_inf>
     50c:	51 11       	cpse	r21, r1
     50e:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_szero>
     512:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__fp_nan>

00000516 <__divsf3x>:
     516:	0e 94 84 03 	call	0x708	; 0x708 <__fp_split3>
     51a:	68 f3       	brcs	.-38     	; 0x4f6 <__divsf3+0x8>

0000051c <__divsf3_pse>:
     51c:	99 23       	and	r25, r25
     51e:	b1 f3       	breq	.-20     	; 0x50c <__divsf3+0x1e>
     520:	55 23       	and	r21, r21
     522:	91 f3       	breq	.-28     	; 0x508 <__divsf3+0x1a>
     524:	95 1b       	sub	r25, r21
     526:	55 0b       	sbc	r21, r21
     528:	bb 27       	eor	r27, r27
     52a:	aa 27       	eor	r26, r26
     52c:	62 17       	cp	r22, r18
     52e:	73 07       	cpc	r23, r19
     530:	84 07       	cpc	r24, r20
     532:	38 f0       	brcs	.+14     	; 0x542 <__divsf3_pse+0x26>
     534:	9f 5f       	subi	r25, 0xFF	; 255
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	44 1f       	adc	r20, r20
     53e:	aa 1f       	adc	r26, r26
     540:	a9 f3       	breq	.-22     	; 0x52c <__divsf3_pse+0x10>
     542:	35 d0       	rcall	.+106    	; 0x5ae <__divsf3_pse+0x92>
     544:	0e 2e       	mov	r0, r30
     546:	3a f0       	brmi	.+14     	; 0x556 <__divsf3_pse+0x3a>
     548:	e0 e8       	ldi	r30, 0x80	; 128
     54a:	32 d0       	rcall	.+100    	; 0x5b0 <__divsf3_pse+0x94>
     54c:	91 50       	subi	r25, 0x01	; 1
     54e:	50 40       	sbci	r21, 0x00	; 0
     550:	e6 95       	lsr	r30
     552:	00 1c       	adc	r0, r0
     554:	ca f7       	brpl	.-14     	; 0x548 <__divsf3_pse+0x2c>
     556:	2b d0       	rcall	.+86     	; 0x5ae <__divsf3_pse+0x92>
     558:	fe 2f       	mov	r31, r30
     55a:	29 d0       	rcall	.+82     	; 0x5ae <__divsf3_pse+0x92>
     55c:	66 0f       	add	r22, r22
     55e:	77 1f       	adc	r23, r23
     560:	88 1f       	adc	r24, r24
     562:	bb 1f       	adc	r27, r27
     564:	26 17       	cp	r18, r22
     566:	37 07       	cpc	r19, r23
     568:	48 07       	cpc	r20, r24
     56a:	ab 07       	cpc	r26, r27
     56c:	b0 e8       	ldi	r27, 0x80	; 128
     56e:	09 f0       	breq	.+2      	; 0x572 <__divsf3_pse+0x56>
     570:	bb 0b       	sbc	r27, r27
     572:	80 2d       	mov	r24, r0
     574:	bf 01       	movw	r22, r30
     576:	ff 27       	eor	r31, r31
     578:	93 58       	subi	r25, 0x83	; 131
     57a:	5f 4f       	sbci	r21, 0xFF	; 255
     57c:	3a f0       	brmi	.+14     	; 0x58c <__divsf3_pse+0x70>
     57e:	9e 3f       	cpi	r25, 0xFE	; 254
     580:	51 05       	cpc	r21, r1
     582:	78 f0       	brcs	.+30     	; 0x5a2 <__divsf3_pse+0x86>
     584:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__fp_inf>
     588:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_szero>
     58c:	5f 3f       	cpi	r21, 0xFF	; 255
     58e:	e4 f3       	brlt	.-8      	; 0x588 <__divsf3_pse+0x6c>
     590:	98 3e       	cpi	r25, 0xE8	; 232
     592:	d4 f3       	brlt	.-12     	; 0x588 <__divsf3_pse+0x6c>
     594:	86 95       	lsr	r24
     596:	77 95       	ror	r23
     598:	67 95       	ror	r22
     59a:	b7 95       	ror	r27
     59c:	f7 95       	ror	r31
     59e:	9f 5f       	subi	r25, 0xFF	; 255
     5a0:	c9 f7       	brne	.-14     	; 0x594 <__divsf3_pse+0x78>
     5a2:	88 0f       	add	r24, r24
     5a4:	91 1d       	adc	r25, r1
     5a6:	96 95       	lsr	r25
     5a8:	87 95       	ror	r24
     5aa:	97 f9       	bld	r25, 7
     5ac:	08 95       	ret
     5ae:	e1 e0       	ldi	r30, 0x01	; 1
     5b0:	66 0f       	add	r22, r22
     5b2:	77 1f       	adc	r23, r23
     5b4:	88 1f       	adc	r24, r24
     5b6:	bb 1f       	adc	r27, r27
     5b8:	62 17       	cp	r22, r18
     5ba:	73 07       	cpc	r23, r19
     5bc:	84 07       	cpc	r24, r20
     5be:	ba 07       	cpc	r27, r26
     5c0:	20 f0       	brcs	.+8      	; 0x5ca <__divsf3_pse+0xae>
     5c2:	62 1b       	sub	r22, r18
     5c4:	73 0b       	sbc	r23, r19
     5c6:	84 0b       	sbc	r24, r20
     5c8:	ba 0b       	sbc	r27, r26
     5ca:	ee 1f       	adc	r30, r30
     5cc:	88 f7       	brcc	.-30     	; 0x5b0 <__divsf3_pse+0x94>
     5ce:	e0 95       	com	r30
     5d0:	08 95       	ret

000005d2 <__fixsfsi>:
     5d2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__fixunssfsi>
     5d6:	68 94       	set
     5d8:	b1 11       	cpse	r27, r1
     5da:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_szero>
     5de:	08 95       	ret

000005e0 <__fixunssfsi>:
     5e0:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_splitA>
     5e4:	88 f0       	brcs	.+34     	; 0x608 <__fixunssfsi+0x28>
     5e6:	9f 57       	subi	r25, 0x7F	; 127
     5e8:	98 f0       	brcs	.+38     	; 0x610 <__fixunssfsi+0x30>
     5ea:	b9 2f       	mov	r27, r25
     5ec:	99 27       	eor	r25, r25
     5ee:	b7 51       	subi	r27, 0x17	; 23
     5f0:	b0 f0       	brcs	.+44     	; 0x61e <__fixunssfsi+0x3e>
     5f2:	e1 f0       	breq	.+56     	; 0x62c <__fixunssfsi+0x4c>
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	88 1f       	adc	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	1a f0       	brmi	.+6      	; 0x604 <__fixunssfsi+0x24>
     5fe:	ba 95       	dec	r27
     600:	c9 f7       	brne	.-14     	; 0x5f4 <__fixunssfsi+0x14>
     602:	14 c0       	rjmp	.+40     	; 0x62c <__fixunssfsi+0x4c>
     604:	b1 30       	cpi	r27, 0x01	; 1
     606:	91 f0       	breq	.+36     	; 0x62c <__fixunssfsi+0x4c>
     608:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_zero>
     60c:	b1 e0       	ldi	r27, 0x01	; 1
     60e:	08 95       	ret
     610:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_zero>
     614:	67 2f       	mov	r22, r23
     616:	78 2f       	mov	r23, r24
     618:	88 27       	eor	r24, r24
     61a:	b8 5f       	subi	r27, 0xF8	; 248
     61c:	39 f0       	breq	.+14     	; 0x62c <__fixunssfsi+0x4c>
     61e:	b9 3f       	cpi	r27, 0xF9	; 249
     620:	cc f3       	brlt	.-14     	; 0x614 <__fixunssfsi+0x34>
     622:	86 95       	lsr	r24
     624:	77 95       	ror	r23
     626:	67 95       	ror	r22
     628:	b3 95       	inc	r27
     62a:	d9 f7       	brne	.-10     	; 0x622 <__fixunssfsi+0x42>
     62c:	3e f4       	brtc	.+14     	; 0x63c <__fixunssfsi+0x5c>
     62e:	90 95       	com	r25
     630:	80 95       	com	r24
     632:	70 95       	com	r23
     634:	61 95       	neg	r22
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	8f 4f       	sbci	r24, 0xFF	; 255
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	08 95       	ret

0000063e <__floatunsisf>:
     63e:	e8 94       	clt
     640:	09 c0       	rjmp	.+18     	; 0x654 <__floatsisf+0x12>

00000642 <__floatsisf>:
     642:	97 fb       	bst	r25, 7
     644:	3e f4       	brtc	.+14     	; 0x654 <__floatsisf+0x12>
     646:	90 95       	com	r25
     648:	80 95       	com	r24
     64a:	70 95       	com	r23
     64c:	61 95       	neg	r22
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	8f 4f       	sbci	r24, 0xFF	; 255
     652:	9f 4f       	sbci	r25, 0xFF	; 255
     654:	99 23       	and	r25, r25
     656:	a9 f0       	breq	.+42     	; 0x682 <__floatsisf+0x40>
     658:	f9 2f       	mov	r31, r25
     65a:	96 e9       	ldi	r25, 0x96	; 150
     65c:	bb 27       	eor	r27, r27
     65e:	93 95       	inc	r25
     660:	f6 95       	lsr	r31
     662:	87 95       	ror	r24
     664:	77 95       	ror	r23
     666:	67 95       	ror	r22
     668:	b7 95       	ror	r27
     66a:	f1 11       	cpse	r31, r1
     66c:	f8 cf       	rjmp	.-16     	; 0x65e <__floatsisf+0x1c>
     66e:	fa f4       	brpl	.+62     	; 0x6ae <__floatsisf+0x6c>
     670:	bb 0f       	add	r27, r27
     672:	11 f4       	brne	.+4      	; 0x678 <__floatsisf+0x36>
     674:	60 ff       	sbrs	r22, 0
     676:	1b c0       	rjmp	.+54     	; 0x6ae <__floatsisf+0x6c>
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	8f 4f       	sbci	r24, 0xFF	; 255
     67e:	9f 4f       	sbci	r25, 0xFF	; 255
     680:	16 c0       	rjmp	.+44     	; 0x6ae <__floatsisf+0x6c>
     682:	88 23       	and	r24, r24
     684:	11 f0       	breq	.+4      	; 0x68a <__floatsisf+0x48>
     686:	96 e9       	ldi	r25, 0x96	; 150
     688:	11 c0       	rjmp	.+34     	; 0x6ac <__floatsisf+0x6a>
     68a:	77 23       	and	r23, r23
     68c:	21 f0       	breq	.+8      	; 0x696 <__floatsisf+0x54>
     68e:	9e e8       	ldi	r25, 0x8E	; 142
     690:	87 2f       	mov	r24, r23
     692:	76 2f       	mov	r23, r22
     694:	05 c0       	rjmp	.+10     	; 0x6a0 <__floatsisf+0x5e>
     696:	66 23       	and	r22, r22
     698:	71 f0       	breq	.+28     	; 0x6b6 <__floatsisf+0x74>
     69a:	96 e8       	ldi	r25, 0x86	; 134
     69c:	86 2f       	mov	r24, r22
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	2a f0       	brmi	.+10     	; 0x6ae <__floatsisf+0x6c>
     6a4:	9a 95       	dec	r25
     6a6:	66 0f       	add	r22, r22
     6a8:	77 1f       	adc	r23, r23
     6aa:	88 1f       	adc	r24, r24
     6ac:	da f7       	brpl	.-10     	; 0x6a4 <__floatsisf+0x62>
     6ae:	88 0f       	add	r24, r24
     6b0:	96 95       	lsr	r25
     6b2:	87 95       	ror	r24
     6b4:	97 f9       	bld	r25, 7
     6b6:	08 95       	ret

000006b8 <__fp_inf>:
     6b8:	97 f9       	bld	r25, 7
     6ba:	9f 67       	ori	r25, 0x7F	; 127
     6bc:	80 e8       	ldi	r24, 0x80	; 128
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	08 95       	ret

000006c4 <__fp_nan>:
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
     6c6:	80 ec       	ldi	r24, 0xC0	; 192
     6c8:	08 95       	ret

000006ca <__fp_pscA>:
     6ca:	00 24       	eor	r0, r0
     6cc:	0a 94       	dec	r0
     6ce:	16 16       	cp	r1, r22
     6d0:	17 06       	cpc	r1, r23
     6d2:	18 06       	cpc	r1, r24
     6d4:	09 06       	cpc	r0, r25
     6d6:	08 95       	ret

000006d8 <__fp_pscB>:
     6d8:	00 24       	eor	r0, r0
     6da:	0a 94       	dec	r0
     6dc:	12 16       	cp	r1, r18
     6de:	13 06       	cpc	r1, r19
     6e0:	14 06       	cpc	r1, r20
     6e2:	05 06       	cpc	r0, r21
     6e4:	08 95       	ret

000006e6 <__fp_round>:
     6e6:	09 2e       	mov	r0, r25
     6e8:	03 94       	inc	r0
     6ea:	00 0c       	add	r0, r0
     6ec:	11 f4       	brne	.+4      	; 0x6f2 <__fp_round+0xc>
     6ee:	88 23       	and	r24, r24
     6f0:	52 f0       	brmi	.+20     	; 0x706 <__fp_round+0x20>
     6f2:	bb 0f       	add	r27, r27
     6f4:	40 f4       	brcc	.+16     	; 0x706 <__fp_round+0x20>
     6f6:	bf 2b       	or	r27, r31
     6f8:	11 f4       	brne	.+4      	; 0x6fe <__fp_round+0x18>
     6fa:	60 ff       	sbrs	r22, 0
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <__fp_round+0x20>
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	8f 4f       	sbci	r24, 0xFF	; 255
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	08 95       	ret

00000708 <__fp_split3>:
     708:	57 fd       	sbrc	r21, 7
     70a:	90 58       	subi	r25, 0x80	; 128
     70c:	44 0f       	add	r20, r20
     70e:	55 1f       	adc	r21, r21
     710:	59 f0       	breq	.+22     	; 0x728 <__fp_splitA+0x10>
     712:	5f 3f       	cpi	r21, 0xFF	; 255
     714:	71 f0       	breq	.+28     	; 0x732 <__fp_splitA+0x1a>
     716:	47 95       	ror	r20

00000718 <__fp_splitA>:
     718:	88 0f       	add	r24, r24
     71a:	97 fb       	bst	r25, 7
     71c:	99 1f       	adc	r25, r25
     71e:	61 f0       	breq	.+24     	; 0x738 <__fp_splitA+0x20>
     720:	9f 3f       	cpi	r25, 0xFF	; 255
     722:	79 f0       	breq	.+30     	; 0x742 <__fp_splitA+0x2a>
     724:	87 95       	ror	r24
     726:	08 95       	ret
     728:	12 16       	cp	r1, r18
     72a:	13 06       	cpc	r1, r19
     72c:	14 06       	cpc	r1, r20
     72e:	55 1f       	adc	r21, r21
     730:	f2 cf       	rjmp	.-28     	; 0x716 <__fp_split3+0xe>
     732:	46 95       	lsr	r20
     734:	f1 df       	rcall	.-30     	; 0x718 <__fp_splitA>
     736:	08 c0       	rjmp	.+16     	; 0x748 <__fp_splitA+0x30>
     738:	16 16       	cp	r1, r22
     73a:	17 06       	cpc	r1, r23
     73c:	18 06       	cpc	r1, r24
     73e:	99 1f       	adc	r25, r25
     740:	f1 cf       	rjmp	.-30     	; 0x724 <__fp_splitA+0xc>
     742:	86 95       	lsr	r24
     744:	71 05       	cpc	r23, r1
     746:	61 05       	cpc	r22, r1
     748:	08 94       	sec
     74a:	08 95       	ret

0000074c <__fp_zero>:
     74c:	e8 94       	clt

0000074e <__fp_szero>:
     74e:	bb 27       	eor	r27, r27
     750:	66 27       	eor	r22, r22
     752:	77 27       	eor	r23, r23
     754:	cb 01       	movw	r24, r22
     756:	97 f9       	bld	r25, 7
     758:	08 95       	ret

0000075a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     75a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     75c:	91 8d       	ldd	r25, Z+25	; 0x19
     75e:	22 8d       	ldd	r18, Z+26	; 0x1a
     760:	89 2f       	mov	r24, r25
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	80 5c       	subi	r24, 0xC0	; 192
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	82 1b       	sub	r24, r18
     76a:	91 09       	sbc	r25, r1
}
     76c:	8f 73       	andi	r24, 0x3F	; 63
     76e:	99 27       	eor	r25, r25
     770:	08 95       	ret

00000772 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     772:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     774:	91 8d       	ldd	r25, Z+25	; 0x19
     776:	82 8d       	ldd	r24, Z+26	; 0x1a
     778:	98 17       	cp	r25, r24
     77a:	31 f0       	breq	.+12     	; 0x788 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     77c:	82 8d       	ldd	r24, Z+26	; 0x1a
     77e:	e8 0f       	add	r30, r24
     780:	f1 1d       	adc	r31, r1
     782:	85 8d       	ldd	r24, Z+29	; 0x1d
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     78c:	08 95       	ret

0000078e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     78e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     790:	91 8d       	ldd	r25, Z+25	; 0x19
     792:	82 8d       	ldd	r24, Z+26	; 0x1a
     794:	98 17       	cp	r25, r24
     796:	61 f0       	breq	.+24     	; 0x7b0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     798:	82 8d       	ldd	r24, Z+26	; 0x1a
     79a:	df 01       	movw	r26, r30
     79c:	a8 0f       	add	r26, r24
     79e:	b1 1d       	adc	r27, r1
     7a0:	5d 96       	adiw	r26, 0x1d	; 29
     7a2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     7a4:	92 8d       	ldd	r25, Z+26	; 0x1a
     7a6:	9f 5f       	subi	r25, 0xFF	; 255
     7a8:	9f 73       	andi	r25, 0x3F	; 63
     7aa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     7b4:	08 95       	ret

000007b6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7b6:	80 e3       	ldi	r24, 0x30	; 48
     7b8:	95 e0       	ldi	r25, 0x05	; 5
     7ba:	89 2b       	or	r24, r25
     7bc:	49 f0       	breq	.+18     	; 0x7d0 <_Z14serialEventRunv+0x1a>
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	89 2b       	or	r24, r25
     7c4:	29 f0       	breq	.+10     	; 0x7d0 <_Z14serialEventRunv+0x1a>
     7c6:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z17Serial0_availablev>
     7ca:	81 11       	cpse	r24, r1
     7cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     7d0:	08 95       	ret

000007d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     7d2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     7d4:	84 8d       	ldd	r24, Z+28	; 0x1c
     7d6:	df 01       	movw	r26, r30
     7d8:	a8 0f       	add	r26, r24
     7da:	b1 1d       	adc	r27, r1
     7dc:	a3 5a       	subi	r26, 0xA3	; 163
     7de:	bf 4f       	sbci	r27, 0xFF	; 255
     7e0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7e2:	84 8d       	ldd	r24, Z+28	; 0x1c
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	8f 73       	andi	r24, 0x3F	; 63
     7ea:	99 27       	eor	r25, r25
     7ec:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     7ee:	a6 89       	ldd	r26, Z+22	; 0x16
     7f0:	b7 89       	ldd	r27, Z+23	; 0x17
     7f2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     7f4:	a0 89       	ldd	r26, Z+16	; 0x10
     7f6:	b1 89       	ldd	r27, Z+17	; 0x11
     7f8:	8c 91       	ld	r24, X
     7fa:	80 64       	ori	r24, 0x40	; 64
     7fc:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     7fe:	93 8d       	ldd	r25, Z+27	; 0x1b
     800:	84 8d       	ldd	r24, Z+28	; 0x1c
     802:	98 13       	cpse	r25, r24
     804:	06 c0       	rjmp	.+12     	; 0x812 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     806:	02 88       	ldd	r0, Z+18	; 0x12
     808:	f3 89       	ldd	r31, Z+19	; 0x13
     80a:	e0 2d       	mov	r30, r0
     80c:	80 81       	ld	r24, Z
     80e:	8f 7d       	andi	r24, 0xDF	; 223
     810:	80 83       	st	Z, r24
     812:	08 95       	ret

00000814 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     81a:	88 8d       	ldd	r24, Y+24	; 0x18
     81c:	88 23       	and	r24, r24
     81e:	c9 f0       	breq	.+50     	; 0x852 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     820:	ea 89       	ldd	r30, Y+18	; 0x12
     822:	fb 89       	ldd	r31, Y+19	; 0x13
     824:	80 81       	ld	r24, Z
     826:	85 fd       	sbrc	r24, 5
     828:	05 c0       	rjmp	.+10     	; 0x834 <_ZN14HardwareSerial5flushEv+0x20>
     82a:	a8 89       	ldd	r26, Y+16	; 0x10
     82c:	b9 89       	ldd	r27, Y+17	; 0x11
     82e:	8c 91       	ld	r24, X
     830:	86 fd       	sbrc	r24, 6
     832:	0f c0       	rjmp	.+30     	; 0x852 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	07 fc       	sbrc	r0, 7
     838:	f5 cf       	rjmp	.-22     	; 0x824 <_ZN14HardwareSerial5flushEv+0x10>
     83a:	80 81       	ld	r24, Z
     83c:	85 ff       	sbrs	r24, 5
     83e:	f2 cf       	rjmp	.-28     	; 0x824 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     840:	a8 89       	ldd	r26, Y+16	; 0x10
     842:	b9 89       	ldd	r27, Y+17	; 0x11
     844:	8c 91       	ld	r24, X
     846:	85 ff       	sbrs	r24, 5
     848:	ed cf       	rjmp	.-38     	; 0x824 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     850:	e7 cf       	rjmp	.-50     	; 0x820 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ec 01       	movw	r28, r24
  _written = true;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     86a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     86c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     86e:	98 13       	cpse	r25, r24
     870:	05 c0       	rjmp	.+10     	; 0x87c <_ZN14HardwareSerial5writeEh+0x24>
     872:	e8 89       	ldd	r30, Y+16	; 0x10
     874:	f9 89       	ldd	r31, Y+17	; 0x11
     876:	80 81       	ld	r24, Z
     878:	85 fd       	sbrc	r24, 5
     87a:	24 c0       	rjmp	.+72     	; 0x8c4 <_ZN14HardwareSerial5writeEh+0x6c>
     87c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     87e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     880:	10 e0       	ldi	r17, 0x00	; 0
     882:	0f 5f       	subi	r16, 0xFF	; 255
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	0f 73       	andi	r16, 0x3F	; 63
     888:	11 27       	eor	r17, r17
     88a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     88c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     88e:	e8 12       	cpse	r14, r24
     890:	0c c0       	rjmp	.+24     	; 0x8aa <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	07 fc       	sbrc	r0, 7
     896:	fa cf       	rjmp	.-12     	; 0x88c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     898:	e8 89       	ldd	r30, Y+16	; 0x10
     89a:	f9 89       	ldd	r31, Y+17	; 0x11
     89c:	80 81       	ld	r24, Z
     89e:	85 ff       	sbrs	r24, 5
     8a0:	f5 cf       	rjmp	.-22     	; 0x88c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     8a2:	ce 01       	movw	r24, r28
     8a4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8a8:	f1 cf       	rjmp	.-30     	; 0x88c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     8aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8ac:	fe 01       	movw	r30, r28
     8ae:	e8 0f       	add	r30, r24
     8b0:	f1 1d       	adc	r31, r1
     8b2:	e3 5a       	subi	r30, 0xA3	; 163
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     8b8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     8ba:	ea 89       	ldd	r30, Y+18	; 0x12
     8bc:	fb 89       	ldd	r31, Y+19	; 0x13
     8be:	80 81       	ld	r24, Z
     8c0:	80 62       	ori	r24, 0x20	; 32
     8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     8c4:	ee 89       	ldd	r30, Y+22	; 0x16
     8c6:	ff 89       	ldd	r31, Y+23	; 0x17
     8c8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     8ca:	e8 89       	ldd	r30, Y+16	; 0x10
     8cc:	f9 89       	ldd	r31, Y+17	; 0x11
     8ce:	80 81       	ld	r24, Z
     8d0:	80 64       	ori	r24, 0x40	; 64
     8d2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	08 95       	ret

000008e6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     8e6:	cf 92       	push	r12
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
     8f6:	6a 01       	movw	r12, r20
     8f8:	7b 01       	movw	r14, r22
     8fa:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     8fc:	e8 89       	ldd	r30, Y+16	; 0x10
     8fe:	f9 89       	ldd	r31, Y+17	; 0x11
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     904:	41 15       	cp	r20, r1
     906:	51 4e       	sbci	r21, 0xE1	; 225
     908:	61 05       	cpc	r22, r1
     90a:	71 05       	cpc	r23, r1
     90c:	b1 f0       	breq	.+44     	; 0x93a <__stack+0x3b>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	79 e0       	ldi	r23, 0x09	; 9
     912:	8d e3       	ldi	r24, 0x3D	; 61
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a7 01       	movw	r20, r14
     918:	96 01       	movw	r18, r12
     91a:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	a1 09       	sbc	r26, r1
     926:	b1 09       	sbc	r27, r1
     928:	b6 95       	lsr	r27
     92a:	a7 95       	ror	r26
     92c:	97 95       	ror	r25
     92e:	87 95       	ror	r24
     930:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     932:	41 15       	cp	r20, r1
     934:	80 e1       	ldi	r24, 0x10	; 16
     936:	58 07       	cpc	r21, r24
     938:	a8 f0       	brcs	.+42     	; 0x964 <__stack+0x65>
  {
    *_ucsra = 0;
     93a:	e8 89       	ldd	r30, Y+16	; 0x10
     93c:	f9 89       	ldd	r31, Y+17	; 0x11
     93e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     940:	60 e8       	ldi	r22, 0x80	; 128
     942:	74 e8       	ldi	r23, 0x84	; 132
     944:	8e e1       	ldi	r24, 0x1E	; 30
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a7 01       	movw	r20, r14
     94a:	96 01       	movw	r18, r12
     94c:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     950:	ba 01       	movw	r22, r20
     952:	a9 01       	movw	r20, r18
     954:	41 50       	subi	r20, 0x01	; 1
     956:	51 09       	sbc	r21, r1
     958:	61 09       	sbc	r22, r1
     95a:	71 09       	sbc	r23, r1
     95c:	76 95       	lsr	r23
     95e:	67 95       	ror	r22
     960:	57 95       	ror	r21
     962:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     964:	ec 85       	ldd	r30, Y+12	; 0x0c
     966:	fd 85       	ldd	r31, Y+13	; 0x0d
     968:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     96a:	ee 85       	ldd	r30, Y+14	; 0x0e
     96c:	ff 85       	ldd	r31, Y+15	; 0x0f
     96e:	40 83       	st	Z, r20

  _written = false;
     970:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     972:	ec 89       	ldd	r30, Y+20	; 0x14
     974:	fd 89       	ldd	r31, Y+21	; 0x15
     976:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     978:	ea 89       	ldd	r30, Y+18	; 0x12
     97a:	fb 89       	ldd	r31, Y+19	; 0x13
     97c:	80 81       	ld	r24, Z
     97e:	80 61       	ori	r24, 0x10	; 16
     980:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     982:	ea 89       	ldd	r30, Y+18	; 0x12
     984:	fb 89       	ldd	r31, Y+19	; 0x13
     986:	80 81       	ld	r24, Z
     988:	88 60       	ori	r24, 0x08	; 8
     98a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     98c:	ea 89       	ldd	r30, Y+18	; 0x12
     98e:	fb 89       	ldd	r31, Y+19	; 0x13
     990:	80 81       	ld	r24, Z
     992:	80 68       	ori	r24, 0x80	; 128
     994:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     996:	ea 89       	ldd	r30, Y+18	; 0x12
     998:	fb 89       	ldd	r31, Y+19	; 0x13
     99a:	80 81       	ld	r24, Z
     99c:	8f 7d       	andi	r24, 0xDF	; 223
     99e:	80 83       	st	Z, r24
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	08 95       	ret

000009b0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	8f 93       	push	r24
     9be:	9f 93       	push	r25
     9c0:	ef 93       	push	r30
     9c2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     9c4:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end+0x10>
     9c8:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__data_end+0x11>
     9cc:	80 81       	ld	r24, Z
     9ce:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end+0x16>
     9d2:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <__data_end+0x17>
     9d6:	82 fd       	sbrc	r24, 2
     9d8:	12 c0       	rjmp	.+36     	; 0x9fe <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9da:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9dc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__data_end+0x19>
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9e4:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end+0x1a>
     9e8:	82 17       	cp	r24, r18
     9ea:	51 f0       	breq	.+20     	; 0xa00 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     9ec:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <__data_end+0x19>
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	e0 5e       	subi	r30, 0xE0	; 224
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9f8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__data_end+0x19>
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9fe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	0f 90       	pop	r0
     a5c:	1f 90       	pop	r1
     a5e:	18 95       	reti

00000a60 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 ad 03 	call	0x75a	; 0x75a <_ZN14HardwareSerial9availableEv>
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	89 2b       	or	r24, r25
     a6c:	09 f4       	brne	.+2      	; 0xa70 <_Z17Serial0_availablev+0x10>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
}
     a70:	82 2f       	mov	r24, r18
     a72:	08 95       	ret

00000a74 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a74:	e0 e2       	ldi	r30, 0x20	; 32
     a76:	f1 e0       	ldi	r31, 0x01	; 1
     a78:	13 82       	std	Z+3, r1	; 0x03
     a7a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     a7c:	88 ee       	ldi	r24, 0xE8	; 232
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	84 83       	std	Z+4, r24	; 0x04
     a86:	95 83       	std	Z+5, r25	; 0x05
     a88:	a6 83       	std	Z+6, r26	; 0x06
     a8a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a8c:	84 e1       	ldi	r24, 0x14	; 20
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
     a94:	85 ec       	ldi	r24, 0xC5	; 197
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	95 87       	std	Z+13, r25	; 0x0d
     a9a:	84 87       	std	Z+12, r24	; 0x0c
     a9c:	84 ec       	ldi	r24, 0xC4	; 196
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	97 87       	std	Z+15, r25	; 0x0f
     aa2:	86 87       	std	Z+14, r24	; 0x0e
     aa4:	80 ec       	ldi	r24, 0xC0	; 192
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	91 8b       	std	Z+17, r25	; 0x11
     aaa:	80 8b       	std	Z+16, r24	; 0x10
     aac:	81 ec       	ldi	r24, 0xC1	; 193
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	93 8b       	std	Z+19, r25	; 0x13
     ab2:	82 8b       	std	Z+18, r24	; 0x12
     ab4:	82 ec       	ldi	r24, 0xC2	; 194
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	95 8b       	std	Z+21, r25	; 0x15
     aba:	84 8b       	std	Z+20, r24	; 0x14
     abc:	86 ec       	ldi	r24, 0xC6	; 198
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	97 8b       	std	Z+23, r25	; 0x17
     ac2:	86 8b       	std	Z+22, r24	; 0x16
     ac4:	11 8e       	std	Z+25, r1	; 0x19
     ac6:	12 8e       	std	Z+26, r1	; 0x1a
     ac8:	13 8e       	std	Z+27, r1	; 0x1b
     aca:	14 8e       	std	Z+28, r1	; 0x1c
     acc:	08 95       	ret

00000ace <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     ace:	08 95       	ret

00000ad0 <main>:

int main(void)
{
	init();
     ad0:	0e 94 19 07 	call	0xe32	; 0xe32 <init>

	initVariant();
     ad4:	0e 94 67 05 	call	0xace	; 0xace <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ad8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     adc:	cb ed       	ldi	r28, 0xDB	; 219
     ade:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     ae0:	0e 94 c2 01 	call	0x384	; 0x384 <loop>
		if (serialEventRun) serialEventRun();
     ae4:	20 97       	sbiw	r28, 0x00	; 0
     ae6:	e1 f3       	breq	.-8      	; 0xae0 <main+0x10>
     ae8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z14serialEventRunv>
     aec:	f9 cf       	rjmp	.-14     	; 0xae0 <main+0x10>

00000aee <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	6c 01       	movw	r12, r24
     b00:	7a 01       	movw	r14, r20
     b02:	8b 01       	movw	r16, r22
     b04:	c0 e0       	ldi	r28, 0x00	; 0
     b06:	d0 e0       	ldi	r29, 0x00	; 0
     b08:	ce 15       	cp	r28, r14
     b0a:	df 05       	cpc	r29, r15
     b0c:	89 f0       	breq	.+34     	; 0xb30 <_ZN5Print5writeEPKhj+0x42>
     b0e:	d8 01       	movw	r26, r16
     b10:	6d 91       	ld	r22, X+
     b12:	8d 01       	movw	r16, r26
     b14:	d6 01       	movw	r26, r12
     b16:	ed 91       	ld	r30, X+
     b18:	fc 91       	ld	r31, X
     b1a:	01 90       	ld	r0, Z+
     b1c:	f0 81       	ld	r31, Z
     b1e:	e0 2d       	mov	r30, r0
     b20:	c6 01       	movw	r24, r12
     b22:	09 95       	icall
     b24:	89 2b       	or	r24, r25
     b26:	11 f4       	brne	.+4      	; 0xb2c <_ZN5Print5writeEPKhj+0x3e>
     b28:	7e 01       	movw	r14, r28
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <_ZN5Print5writeEPKhj+0x42>
     b2c:	21 96       	adiw	r28, 0x01	; 1
     b2e:	ec cf       	rjmp	.-40     	; 0xb08 <_ZN5Print5writeEPKhj+0x1a>
     b30:	c7 01       	movw	r24, r14
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <_ZN5Print5writeEPKc>:
     b44:	61 15       	cp	r22, r1
     b46:	71 05       	cpc	r23, r1
     b48:	79 f0       	breq	.+30     	; 0xb68 <_ZN5Print5writeEPKc+0x24>
     b4a:	fb 01       	movw	r30, r22
     b4c:	01 90       	ld	r0, Z+
     b4e:	00 20       	and	r0, r0
     b50:	e9 f7       	brne	.-6      	; 0xb4c <_ZN5Print5writeEPKc+0x8>
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	af 01       	movw	r20, r30
     b56:	46 1b       	sub	r20, r22
     b58:	57 0b       	sbc	r21, r23
     b5a:	dc 01       	movw	r26, r24
     b5c:	ed 91       	ld	r30, X+
     b5e:	fc 91       	ld	r31, X
     b60:	02 80       	ldd	r0, Z+2	; 0x02
     b62:	f3 81       	ldd	r31, Z+3	; 0x03
     b64:	e0 2d       	mov	r30, r0
     b66:	09 94       	ijmp
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	08 95       	ret

00000b6e <_ZN5Print5printEc>:
     b6e:	dc 01       	movw	r26, r24
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	01 90       	ld	r0, Z+
     b76:	f0 81       	ld	r31, Z
     b78:	e0 2d       	mov	r30, r0
     b7a:	09 94       	ijmp

00000b7c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     b7c:	8f 92       	push	r8
     b7e:	9f 92       	push	r9
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	a1 97       	sbiw	r28, 0x21	; 33
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	7c 01       	movw	r14, r24
     ba6:	d4 2e       	mov	r13, r20
     ba8:	c5 2e       	mov	r12, r21
     baa:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     bac:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     bae:	22 30       	cpi	r18, 0x02	; 2
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <_ZN5Print11printNumberEmh+0x38>
     bb2:	2a e0       	ldi	r18, 0x0A	; 10
     bb4:	8e 01       	movw	r16, r28
     bb6:	0f 5d       	subi	r16, 0xDF	; 223
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     bba:	82 2e       	mov	r8, r18
     bbc:	91 2c       	mov	r9, r1
     bbe:	a1 2c       	mov	r10, r1
     bc0:	b1 2c       	mov	r11, r1
     bc2:	6d 2d       	mov	r22, r13
     bc4:	7c 2d       	mov	r23, r12
     bc6:	cd 01       	movw	r24, r26
     bc8:	a5 01       	movw	r20, r10
     bca:	94 01       	movw	r18, r8
     bcc:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
    n /= base;
     bd0:	d2 2e       	mov	r13, r18
     bd2:	c3 2e       	mov	r12, r19
     bd4:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     bd6:	01 50       	subi	r16, 0x01	; 1
     bd8:	11 09       	sbc	r17, r1
     bda:	6a 30       	cpi	r22, 0x0A	; 10
     bdc:	71 05       	cpc	r23, r1
     bde:	81 05       	cpc	r24, r1
     be0:	91 05       	cpc	r25, r1
     be2:	10 f4       	brcc	.+4      	; 0xbe8 <_ZN5Print11printNumberEmh+0x6c>
     be4:	60 5d       	subi	r22, 0xD0	; 208
     be6:	01 c0       	rjmp	.+2      	; 0xbea <_ZN5Print11printNumberEmh+0x6e>
     be8:	69 5c       	subi	r22, 0xC9	; 201
     bea:	f8 01       	movw	r30, r16
     bec:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     bee:	23 2b       	or	r18, r19
     bf0:	24 2b       	or	r18, r20
     bf2:	25 2b       	or	r18, r21
     bf4:	31 f7       	brne	.-52     	; 0xbc2 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     bf6:	b8 01       	movw	r22, r16
     bf8:	c7 01       	movw	r24, r14
     bfa:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN5Print5writeEPKc>
}
     bfe:	a1 96       	adiw	r28, 0x21	; 33
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	9f 90       	pop	r9
     c20:	8f 90       	pop	r8
     c22:	08 95       	ret

00000c24 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
     c36:	6a 01       	movw	r12, r20
     c38:	7b 01       	movw	r14, r22
  if (base == 0) {
     c3a:	21 15       	cp	r18, r1
     c3c:	31 05       	cpc	r19, r1
     c3e:	79 f4       	brne	.+30     	; 0xc5e <_ZN5Print5printEli+0x3a>
    return write(n);
     c40:	e8 81       	ld	r30, Y
     c42:	f9 81       	ldd	r31, Y+1	; 0x01
     c44:	01 90       	ld	r0, Z+
     c46:	f0 81       	ld	r31, Z
     c48:	e0 2d       	mov	r30, r0
     c4a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     c5c:	09 94       	ijmp
  } else if (base == 10) {
     c5e:	2a 30       	cpi	r18, 0x0A	; 10
     c60:	31 05       	cpc	r19, r1
     c62:	e9 f4       	brne	.+58     	; 0xc9e <_ZN5Print5printEli+0x7a>
    if (n < 0) {
     c64:	77 ff       	sbrs	r23, 7
     c66:	1a c0       	rjmp	.+52     	; 0xc9c <_ZN5Print5printEli+0x78>
      int t = print('-');
     c68:	6d e2       	ldi	r22, 0x2D	; 45
     c6a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN5Print5printEc>
     c6e:	8c 01       	movw	r16, r24
      n = -n;
     c70:	44 27       	eor	r20, r20
     c72:	55 27       	eor	r21, r21
     c74:	ba 01       	movw	r22, r20
     c76:	4c 19       	sub	r20, r12
     c78:	5d 09       	sbc	r21, r13
     c7a:	6e 09       	sbc	r22, r14
     c7c:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     c7e:	2a e0       	ldi	r18, 0x0A	; 10
     c80:	ce 01       	movw	r24, r28
     c82:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Print11printNumberEmh>
     c86:	80 0f       	add	r24, r16
     c88:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     c9c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     c9e:	b7 01       	movw	r22, r14
     ca0:	a6 01       	movw	r20, r12
     ca2:	ce 01       	movw	r24, r28
  }
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     cb4:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <_ZN5Print11printNumberEmh>

00000cb8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     cb8:	9a 01       	movw	r18, r20
  return print((long) n, base);
     cba:	ab 01       	movw	r20, r22
     cbc:	77 0f       	add	r23, r23
     cbe:	66 0b       	sbc	r22, r22
     cc0:	77 0b       	sbc	r23, r23
     cc2:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_ZN5Print5printEli>

00000cc6 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	3f 93       	push	r19
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <timer0_millis>
     ce0:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <timer0_millis+0x1>
     ce4:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <timer0_millis+0x2>
     ce8:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <timer0_millis+0x3>
     cec:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <timer0_fract>
     cf0:	23 e0       	ldi	r18, 0x03	; 3
     cf2:	23 0f       	add	r18, r19
     cf4:	2d 37       	cpi	r18, 0x7D	; 125
     cf6:	20 f4       	brcc	.+8      	; 0xd00 <__vector_16+0x3a>
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	a1 1d       	adc	r26, r1
     cfc:	b1 1d       	adc	r27, r1
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__vector_16+0x44>
     d00:	26 e8       	ldi	r18, 0x86	; 134
     d02:	23 0f       	add	r18, r19
     d04:	02 96       	adiw	r24, 0x02	; 2
     d06:	a1 1d       	adc	r26, r1
     d08:	b1 1d       	adc	r27, r1
     d0a:	20 93 bd 01 	sts	0x01BD, r18	; 0x8001bd <timer0_fract>
     d0e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <timer0_millis>
     d12:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <timer0_millis+0x1>
     d16:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <timer0_millis+0x2>
     d1a:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <timer0_millis+0x3>
     d1e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <timer0_overflow_count>
     d22:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x1>
     d26:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <timer0_overflow_count+0x2>
     d2a:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x3>
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	a1 1d       	adc	r26, r1
     d32:	b1 1d       	adc	r27, r1
     d34:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <timer0_overflow_count>
     d38:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <timer0_overflow_count+0x1>
     d3c:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <timer0_overflow_count+0x2>
     d40:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <timer0_overflow_count+0x3>
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	3f 91       	pop	r19
     d4e:	2f 91       	pop	r18
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     d5a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     d5c:	f8 94       	cli
	m = timer0_overflow_count;
     d5e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <timer0_overflow_count>
     d62:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x1>
     d66:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <timer0_overflow_count+0x2>
     d6a:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d6e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d70:	a8 9b       	sbis	0x15, 0	; 21
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <micros+0x24>
     d74:	2f 3f       	cpi	r18, 0xFF	; 255
     d76:	19 f0       	breq	.+6      	; 0xd7e <micros+0x24>
		m++;
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	a1 1d       	adc	r26, r1
     d7c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d7e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d80:	ba 2f       	mov	r27, r26
     d82:	a9 2f       	mov	r26, r25
     d84:	98 2f       	mov	r25, r24
     d86:	88 27       	eor	r24, r24
     d88:	82 0f       	add	r24, r18
     d8a:	91 1d       	adc	r25, r1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	42 e0       	ldi	r20, 0x02	; 2
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	4a 95       	dec	r20
     da0:	d1 f7       	brne	.-12     	; 0xd96 <micros+0x3c>
}
     da2:	08 95       	ret

00000da4 <delay>:

void delay(unsigned long ms)
{
     da4:	8f 92       	push	r8
     da6:	9f 92       	push	r9
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	6b 01       	movw	r12, r22
     db6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     db8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <micros>
     dbc:	4b 01       	movw	r8, r22
     dbe:	5c 01       	movw	r10, r24

	while (ms > 0) {
     dc0:	c1 14       	cp	r12, r1
     dc2:	d1 04       	cpc	r13, r1
     dc4:	e1 04       	cpc	r14, r1
     dc6:	f1 04       	cpc	r15, r1
     dc8:	01 f1       	breq	.+64     	; 0xe0a <delay+0x66>
		yield();
     dca:	0e 94 1b 08 	call	0x1036	; 0x1036 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     dce:	0e 94 ad 06 	call	0xd5a	; 0xd5a <micros>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	88 19       	sub	r24, r8
     dd8:	99 09       	sbc	r25, r9
     dda:	aa 09       	sbc	r26, r10
     ddc:	bb 09       	sbc	r27, r11
     dde:	88 3e       	cpi	r24, 0xE8	; 232
     de0:	93 40       	sbci	r25, 0x03	; 3
     de2:	a1 05       	cpc	r26, r1
     de4:	b1 05       	cpc	r27, r1
     de6:	60 f3       	brcs	.-40     	; 0xdc0 <delay+0x1c>
			ms--;
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	c2 1a       	sub	r12, r18
     dec:	d1 08       	sbc	r13, r1
     dee:	e1 08       	sbc	r14, r1
     df0:	f1 08       	sbc	r15, r1
			start += 1000;
     df2:	88 ee       	ldi	r24, 0xE8	; 232
     df4:	88 0e       	add	r8, r24
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	98 1e       	adc	r9, r24
     dfa:	a1 1c       	adc	r10, r1
     dfc:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     dfe:	c1 14       	cp	r12, r1
     e00:	d1 04       	cpc	r13, r1
     e02:	e1 04       	cpc	r14, r1
     e04:	f1 04       	cpc	r15, r1
     e06:	19 f7       	brne	.-58     	; 0xdce <delay+0x2a>
     e08:	db cf       	rjmp	.-74     	; 0xdc0 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	bf 90       	pop	r11
     e14:	af 90       	pop	r10
     e16:	9f 90       	pop	r9
     e18:	8f 90       	pop	r8
     e1a:	08 95       	ret

00000e1c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	91 05       	cpc	r25, r1
     e20:	38 f0       	brcs	.+14     	; 0xe30 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e2a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <delayMicroseconds+0x10>
     e30:	08 95       	ret

00000e32 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e32:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e34:	84 b5       	in	r24, 0x24	; 36
     e36:	82 60       	ori	r24, 0x02	; 2
     e38:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e3a:	84 b5       	in	r24, 0x24	; 36
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	81 60       	ori	r24, 0x01	; 1
     e4a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e4c:	ee e6       	ldi	r30, 0x6E	; 110
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e56:	e1 e8       	ldi	r30, 0x81	; 129
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e5c:	80 81       	ld	r24, Z
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e62:	80 81       	ld	r24, Z
     e64:	81 60       	ori	r24, 0x01	; 1
     e66:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e68:	e0 e8       	ldi	r30, 0x80	; 128
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e72:	e1 eb       	ldi	r30, 0xB1	; 177
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	84 60       	ori	r24, 0x04	; 4
     e7a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e7c:	e0 eb       	ldi	r30, 0xB0	; 176
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e86:	ea e7       	ldi	r30, 0x7A	; 122
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	84 60       	ori	r24, 0x04	; 4
     e8e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e90:	80 81       	ld	r24, Z
     e92:	82 60       	ori	r24, 0x02	; 2
     e94:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e96:	80 81       	ld	r24, Z
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e9c:	80 81       	ld	r24, Z
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     ea2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     ea6:	08 95       	ret

00000ea8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	81 f0       	breq	.+32     	; 0xecc <turnOffPWM+0x24>
     eac:	28 f4       	brcc	.+10     	; 0xeb8 <turnOffPWM+0x10>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	99 f0       	breq	.+38     	; 0xed8 <turnOffPWM+0x30>
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	a1 f0       	breq	.+40     	; 0xede <turnOffPWM+0x36>
     eb6:	08 95       	ret
     eb8:	87 30       	cpi	r24, 0x07	; 7
     eba:	a9 f0       	breq	.+42     	; 0xee6 <turnOffPWM+0x3e>
     ebc:	88 30       	cpi	r24, 0x08	; 8
     ebe:	b9 f0       	breq	.+46     	; 0xeee <turnOffPWM+0x46>
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	d1 f4       	brne	.+52     	; 0xef8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ec4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ec8:	8f 7d       	andi	r24, 0xDF	; 223
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     ecc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ed0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ed2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ed6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ed8:	84 b5       	in	r24, 0x24	; 36
     eda:	8f 77       	andi	r24, 0x7F	; 127
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     ede:	84 b5       	in	r24, 0x24	; 36
     ee0:	8f 7d       	andi	r24, 0xDF	; 223
     ee2:	84 bd       	out	0x24, r24	; 36
     ee4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     ee6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     eea:	8f 77       	andi	r24, 0x7F	; 127
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     eee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ef2:	8f 7d       	andi	r24, 0xDF	; 223
     ef4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ef8:	08 95       	ret

00000efa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	e4 58       	subi	r30, 0x84	; 132
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f08:	fc 01       	movw	r30, r24
     f0a:	e0 57       	subi	r30, 0x70	; 112
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f10:	88 23       	and	r24, r24
     f12:	61 f1       	breq	.+88     	; 0xf6c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	e8 54       	subi	r30, 0x48	; 72
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	c5 91       	lpm	r28, Z+
     f22:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f24:	fc 01       	movw	r30, r24
     f26:	e2 55       	subi	r30, 0x52	; 82
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	a5 91       	lpm	r26, Z+
     f2c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f2e:	61 11       	cpse	r22, r1
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f32:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f34:	f8 94       	cli
		*reg &= ~bit;
     f36:	88 81       	ld	r24, Y
     f38:	20 95       	com	r18
     f3a:	82 23       	and	r24, r18
     f3c:	88 83       	st	Y, r24
		*out &= ~bit;
     f3e:	ec 91       	ld	r30, X
     f40:	2e 23       	and	r18, r30
     f42:	0b c0       	rjmp	.+22     	; 0xf5a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f44:	62 30       	cpi	r22, 0x02	; 2
     f46:	61 f4       	brne	.+24     	; 0xf60 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     f48:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f4a:	f8 94       	cli
		*reg &= ~bit;
     f4c:	38 81       	ld	r19, Y
     f4e:	82 2f       	mov	r24, r18
     f50:	80 95       	com	r24
     f52:	83 23       	and	r24, r19
     f54:	88 83       	st	Y, r24
		*out |= bit;
     f56:	ec 91       	ld	r30, X
     f58:	2e 2b       	or	r18, r30
     f5a:	2c 93       	st	X, r18
		SREG = oldSREG;
     f5c:	9f bf       	out	0x3f, r25	; 63
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f60:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f62:	f8 94       	cli
		*reg |= bit;
     f64:	e8 81       	ld	r30, Y
     f66:	2e 2b       	or	r18, r30
     f68:	28 83       	st	Y, r18
		SREG = oldSREG;
     f6a:	8f bf       	out	0x3f, r24	; 63
	}
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	f9 01       	movw	r30, r18
     f7e:	e8 59       	subi	r30, 0x98	; 152
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f84:	f9 01       	movw	r30, r18
     f86:	e4 58       	subi	r30, 0x84	; 132
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f8c:	f9 01       	movw	r30, r18
     f8e:	e0 57       	subi	r30, 0x70	; 112
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f94:	cc 23       	and	r28, r28
     f96:	c9 f0       	breq	.+50     	; 0xfca <digitalWrite+0x58>
     f98:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f9a:	81 11       	cpse	r24, r1
     f9c:	0e 94 54 07 	call	0xea8	; 0xea8 <turnOffPWM>

	out = portOutputRegister(port);
     fa0:	ec 2f       	mov	r30, r28
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	e2 55       	subi	r30, 0x52	; 82
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	a5 91       	lpm	r26, Z+
     fae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     fb0:	8f b7       	in	r24, 0x3f	; 63
	cli();
     fb2:	f8 94       	cli

	if (val == LOW) {
     fb4:	11 11       	cpse	r17, r1
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <digitalWrite+0x50>
		*out &= ~bit;
     fb8:	9c 91       	ld	r25, X
     fba:	ed 2f       	mov	r30, r29
     fbc:	e0 95       	com	r30
     fbe:	e9 23       	and	r30, r25
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <digitalWrite+0x54>
	} else {
		*out |= bit;
     fc2:	ec 91       	ld	r30, X
     fc4:	ed 2b       	or	r30, r29
     fc6:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     fc8:	8f bf       	out	0x3f, r24	; 63
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	08 95       	ret

00000fd2 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	fc 01       	movw	r30, r24
     fda:	e4 58       	subi	r30, 0x84	; 132
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
     fe0:	fc 01       	movw	r30, r24
     fe2:	e0 57       	subi	r30, 0x70	; 112
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
     fe8:	66 23       	and	r22, r22
     fea:	11 f0       	breq	.+4      	; 0xff0 <pulseIn+0x1e>
     fec:	67 2f       	mov	r22, r23
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <pulseIn+0x20>
     ff0:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	ec 55       	subi	r30, 0x5C	; 92
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	85 91       	lpm	r24, Z+
     ffe:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
	uint8_t stateMask = (state ? bit : 0);

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
    1000:	89 01       	movw	r16, r18
    1002:	9a 01       	movw	r18, r20
    1004:	3f 70       	andi	r19, 0x0F	; 15

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    1006:	46 2f       	mov	r20, r22
    1008:	67 2f       	mov	r22, r23
    100a:	0e 94 8c 00 	call	0x118	; 0x118 <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    100e:	61 15       	cp	r22, r1
    1010:	71 05       	cpc	r23, r1
    1012:	81 05       	cpc	r24, r1
    1014:	91 05       	cpc	r25, r1
    1016:	49 f0       	breq	.+18     	; 0x102a <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	a1 1d       	adc	r26, r1
    1020:	b1 1d       	adc	r27, r1
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	9f 70       	andi	r25, 0x0F	; 15
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <pulseIn+0x5e>
	else
		return 0;
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	cb 01       	movw	r24, r22
}
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1036:	08 95       	ret

00001038 <__udivmodsi4>:
    1038:	a1 e2       	ldi	r26, 0x21	; 33
    103a:	1a 2e       	mov	r1, r26
    103c:	aa 1b       	sub	r26, r26
    103e:	bb 1b       	sub	r27, r27
    1040:	fd 01       	movw	r30, r26
    1042:	0d c0       	rjmp	.+26     	; 0x105e <__udivmodsi4_ep>

00001044 <__udivmodsi4_loop>:
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	ee 1f       	adc	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	a2 17       	cp	r26, r18
    104e:	b3 07       	cpc	r27, r19
    1050:	e4 07       	cpc	r30, r20
    1052:	f5 07       	cpc	r31, r21
    1054:	20 f0       	brcs	.+8      	; 0x105e <__udivmodsi4_ep>
    1056:	a2 1b       	sub	r26, r18
    1058:	b3 0b       	sbc	r27, r19
    105a:	e4 0b       	sbc	r30, r20
    105c:	f5 0b       	sbc	r31, r21

0000105e <__udivmodsi4_ep>:
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	1a 94       	dec	r1
    1068:	69 f7       	brne	.-38     	; 0x1044 <__udivmodsi4_loop>
    106a:	60 95       	com	r22
    106c:	70 95       	com	r23
    106e:	80 95       	com	r24
    1070:	90 95       	com	r25
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	bd 01       	movw	r22, r26
    1078:	cf 01       	movw	r24, r30
    107a:	08 95       	ret

0000107c <__divmodsi4>:
    107c:	05 2e       	mov	r0, r21
    107e:	97 fb       	bst	r25, 7
    1080:	1e f4       	brtc	.+6      	; 0x1088 <__divmodsi4+0xc>
    1082:	00 94       	com	r0
    1084:	0e 94 55 08 	call	0x10aa	; 0x10aa <__negsi2>
    1088:	57 fd       	sbrc	r21, 7
    108a:	07 d0       	rcall	.+14     	; 0x109a <__divmodsi4_neg2>
    108c:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
    1090:	07 fc       	sbrc	r0, 7
    1092:	03 d0       	rcall	.+6      	; 0x109a <__divmodsi4_neg2>
    1094:	4e f4       	brtc	.+18     	; 0x10a8 <__divmodsi4_exit>
    1096:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__negsi2>

0000109a <__divmodsi4_neg2>:
    109a:	50 95       	com	r21
    109c:	40 95       	com	r20
    109e:	30 95       	com	r19
    10a0:	21 95       	neg	r18
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	4f 4f       	sbci	r20, 0xFF	; 255
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255

000010a8 <__divmodsi4_exit>:
    10a8:	08 95       	ret

000010aa <__negsi2>:
    10aa:	90 95       	com	r25
    10ac:	80 95       	com	r24
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	08 95       	ret

000010ba <__tablejump2__>:
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	05 90       	lpm	r0, Z+
    10c0:	f4 91       	lpm	r31, Z
    10c2:	e0 2d       	mov	r30, r0
    10c4:	09 94       	ijmp

000010c6 <_exit>:
    10c6:	f8 94       	cli

000010c8 <__stop_program>:
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <__stop_program>
